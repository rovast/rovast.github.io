<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rovast</title>
  
  <subtitle>rovast&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rovast.github.io/"/>
  <updated>2020-11-28T11:10:56.931Z</updated>
  <id>https://rovast.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>借助 skywalking 搭建自己的 APM 数据展示平台</title>
    <link href="https://rovast.github.io/2020/11/28/build-your-own-ui-for-skywalking/"/>
    <id>https://rovast.github.io/2020/11/28/build-your-own-ui-for-skywalking/</id>
    <published>2020-11-28T09:27:41.000Z</published>
    <updated>2020-11-28T11:10:56.931Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/11/28/build-your-own-ui-for-skywalking/logo.jpeg" width="500" height="400"><blockquote><p>SkyWalking: an APM(application performance monitor) system, especially designed for microservices, cloud native and container-based (Docker, Kubernetes, Mesos) architectures.</p><footer><strong>README.md</strong><cite><a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">github.com/apache/skywalking</a></cite></footer></blockquote><p>skywaking(本文后续简称 SW) 在如今的 APM 体系建设中逐渐展露头角，国内几乎所有的一线大厂都借助 skywaling 进行了自己的 APM 体系建设。<br>大厂的建设方案在诸多的大会中都有提及，尤其在刚过去的 《Apache SkyWalking DevCon 2020》，更是带来了诸多的精彩分享。</p><p>本文不会就 APM 架构或理论进行详细阐述，更多聚焦在实战环节，围绕下述几点展开：</p><ol><li>分析 SW 架构，确定接入方案</li><li>如何在本地调式官方的 UI 项目</li><li>快速了解 SW 查询协议 GraphQL </li></ol><h1 id="Skywalking-架构简介，寻找接入点"><a href="#Skywalking-架构简介，寻找接入点" class="headerlink" title="Skywalking 架构简介，寻找接入点"></a>Skywalking 架构简介，寻找接入点</h1><h2 id="几个官方库"><a href="#几个官方库" class="headerlink" title="几个官方库"></a>几个官方库</h2><p>在正式分析之前，我们来看下 SW 比较重要的三个官方项目</p><ul><li>主库 <a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">https://github.com/apache/skywalking</a></li><li>UI 库 <a href="https://github.com/apache/skywalking-rocketbot-ui" target="_blank" rel="noopener">https://github.com/apache/skywalking-rocketbot-ui</a></li><li>查询协议库 <a href="https://github.com/apache/skywalking-query-protocol" target="_blank" rel="noopener">https://github.com/apache/skywalking-query-protocol</a></li></ul><h2 id="SW-查询协议-——-获取数据的桥梁"><a href="#SW-查询协议-——-获取数据的桥梁" class="headerlink" title="SW 查询协议 —— 获取数据的桥梁"></a>SW 查询协议 —— 获取数据的桥梁</h2><p>接下来，我们看下主库的架构图，即 SW 体系的整体架构图：</p><img src="/2020/11/28/build-your-own-ui-for-skywalking/jiagou.jpeg" width="500" height="400"><p>我们关注的 UI 接入部分，在图的左上角，其中 UI 和 CLI 通过查询协议来和 SW 的后端服务进行交互。正如查询协议库所说：</p><blockquote><p>Query Protocol defines the communication protocol in query stage.<br><strong>SkyWalking native UI</strong> and <strong>CLI</strong> use this protocol to <strong>fetch data from the backend</strong> consistently, don’t need to worry about the backend update.</p><footer><strong>README.md</strong><cite><a href="https://github.com/apache/skywalking-query-protocol" target="_blank" rel="noopener">github.com/apache/skywalking-query-protocol</a></cite></footer></blockquote><p>其中重点我们加粗表示了，即：SW 的官方 UI 和 CLI 工具都是通过查询协议和后端服务进行数据交互。</p><p>SW 的查询协议通俗简单的理解：定义了一系列 GraphQL 查询定义。甚至可以进一步粗暴的理解，就是一堆定义好的 HTTP API。所以只要了解官方的 API 定义，即可发挥 SW 的数据宝藏威力，<br>打造属于自己的 APM 展示平台。</p><p>快速搭建的第一步，就是参考官方的 UI 项目，一方面我们可以参考它的 UI 组件实现。另一方面，我们可以抓包，参考它的 GraphQL 请求。</p><h1 id="官网项目本地调试"><a href="#官网项目本地调试" class="headerlink" title="官网项目本地调试"></a>官网项目本地调试</h1><h2 id="本地运行一览"><a href="#本地运行一览" class="headerlink" title="本地运行一览"></a>本地运行一览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置后端的请求地址为 SW 官方的北京机房演示地址</span></span><br><span class="line">➜  skywalking-rocketbot-ui git:(master) <span class="built_in">export</span> SW_PROXY_TARGET=http://122.112.182.72:8080/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务，之后访问 8080 端口</span></span><br><span class="line">➜  skywalking-rocketbot-ui git:(master) npm run serve</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8080/topology" target="_blank" rel="noopener">http://localhost:8080/topology</a></p><img src="/2020/11/28/build-your-own-ui-for-skywalking/ui.jpg"><p>我们看到，服务已成功在本地运行，且可以通过 VueDev Tools 来查看对应的组件实现和传值。对我们自己去实现对应的显示组件，提供了极高的参考意义。</p><blockquote><p>关于如何这个环境变量的设置，大家可以顺着 packages.json 去捋一下 run server 的整个流程</p></blockquote><h2 id="服务抓包格式化"><a href="#服务抓包格式化" class="headerlink" title="服务抓包格式化"></a>服务抓包格式化</h2><p>我们还是以这个拓扑为例，抓一个包，简单看下 GraphQL 请求</p><figure class="highlight json"><figcaption><span>requestPayload</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"query queryTopo($duration: Duration!) &#123;\n  topo: getGlobalTopology(duration: $duration) &#123;\n    nodes &#123;\n      id\n      name\n      type\n      isReal\n    &#125;\n    calls &#123;\n      id\n      source\n      detectPoints\n      target\n    &#125;\n  &#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"variables"</span>: &#123;</span><br><span class="line">    <span class="attr">"serviceId"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"duration"</span>: &#123;</span><br><span class="line">      <span class="attr">"start"</span>: <span class="string">"2020-11-27 0912"</span>,</span><br><span class="line">      <span class="attr">"end"</span>: <span class="string">"2020-11-27 0927"</span>,</span><br><span class="line">      <span class="attr">"step"</span>: <span class="string">"MINUTE"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进一步格式化 graphQL 的 query 请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">query queryTopo($duration: Duration!) &#123;</span><br><span class="line">  topo: getGlobalTopology(duration: $duration) &#123;</span><br><span class="line">    nodes &#123;</span><br><span class="line">      id</span><br><span class="line">      name</span><br><span class="line">      type</span><br><span class="line">      isReal</span><br><span class="line">    &#125;</span><br><span class="line">    calls &#123;</span><br><span class="line">      id</span><br><span class="line">      source</span><br><span class="line">      detectPoints</span><br><span class="line">      target</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>格式化过后，更方便我们进行对应分析。</p><h1 id="分析查询协议"><a href="#分析查询协议" class="headerlink" title="分析查询协议"></a>分析查询协议</h1><h2 id="快速了解查询语句含义"><a href="#快速了解查询语句含义" class="headerlink" title="快速了解查询语句含义"></a>快速了解查询语句含义</h2><p>GraphQL 的更多用法，本文不提及。文本就上述抓到的协议进行简单说明，便于之前不了解 GraphQL 的同学能够快速了解 SW 查询协议。</p><ol><li>查看 Query，确定查询语句，其中 <code>$</code> 开头的就是形参，在 <code>variables</code> 里会具体传值</li><li>那上述例子，<code>$duration</code> 的具体值，就是 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"start"</span>: <span class="string">"2020-11-27 0912"</span>,</span><br><span class="line">  <span class="attr">"end"</span>: <span class="string">"2020-11-27 0927"</span>,</span><br><span class="line">  <span class="attr">"step"</span>: <span class="string">"MINUTE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>那问题来了，我怎么知道 <code>$duration</code> 是由 <code>start</code> <code>end</code> <code>step</code> 组成？他们的值类型是什么？在哪里定义？这就要看之前我们提到的 SW 查询协议。</p><h2 id="查询协议"><a href="#查询协议" class="headerlink" title="查询协议"></a>查询协议</h2><p>接着上面的分析，我们去查看 SW 的 Query Protocol.</p><blockquote><p>到这里大家看到，其实 Query Protocol 就是查询的定义，标准。就像我们平时开发中接触的后端标准接口一样。大家在接触这些看似<br>高大上的 Query Protocol 时，不要被唬到，其实就是相同技术在不同场合的不同叫法罢了。</p></blockquote><p>本例中的拓扑，我们可以查看 <a href="https://github.com/apache/skywalking-query-protocol/blob/master/topology.graphqls" target="_blank" rel="noopener">https://github.com/apache/skywalking-query-protocol/blob/master/topology.graphqls</a> 定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extend type Query &#123;</span><br><span class="line">    # Query the global topology</span><br><span class="line">    getGlobalTopology(duration: Duration!): Topology</span><br><span class="line">    # Query the topology, based on the given service</span><br><span class="line">    getServiceTopology(serviceId: ID!, duration: Duration!): Topology</span><br><span class="line">    # Query the topology, based on the given services.</span><br><span class="line">    # `#getServiceTopology` could be replaced by this.</span><br><span class="line">    getServicesTopology(serviceIds: [ID!]!, duration: Duration!): Topology</span><br><span class="line">    # Query the instance topology, based on the given clientServiceId and serverServiceId</span><br><span class="line">    getServiceInstanceTopology(clientServiceId: ID!, serverServiceId: ID!, duration: Duration!): ServiceInstanceTopology</span><br><span class="line">    # Query the topology, based on the given endpoint</span><br><span class="line">    getEndpointTopology(endpointId: ID!, duration: Duration!): Topology</span><br><span class="line">    # v2 of getEndpointTopology</span><br><span class="line">    getEndpointDependencies(endpointId: ID!, duration: Duration!): EndpointTopology</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到其中就有 <code>getGlobalTopology</code>，再看看我们之前的抓包，我能看下第二行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">query queryTopo($duration: Duration!) &#123;</span><br><span class="line">  topo: getGlobalTopology(duration: $duration) &#123;</span><br><span class="line">    nodes &#123;</span><br><span class="line">      id</span><br><span class="line">      name</span><br><span class="line">      type</span><br><span class="line">      isReal</span><br><span class="line">    &#125;</span><br><span class="line">    calls &#123;</span><br><span class="line">      id</span><br><span class="line">      source</span><br><span class="line">      detectPoints</span><br><span class="line">      target</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二行内容 <code>topo: getGlobalTopology(duration: $duration) {</code></p><ul><li>topo 是查询结果的别名，查询到 response 会放到 topo 字段下</li><li>getGlobalTopology 的定义就是 <code>getGlobalTopology(duration: Duration!): Topology</code></li></ul><p>其中 <code>Duration</code> 定义，我们在 <a href="https://github.com/apache/skywalking-query-protocol/blob/master/common.graphqls" target="_blank" rel="noopener">https://github.com/apache/skywalking-query-protocol/blob/master/common.graphqls</a> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input Duration &#123;</span><br><span class="line">    start: String!</span><br><span class="line">    end: String!</span><br><span class="line">    step: Step!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像套娃一样，你也可以找到 <code>Step</code> 的定义</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文聊了我们如何找到自定义 UI 的切入点，同时就如何参考官方的一些开发细节进行了阐述。希望能给大家自定义数据展示平台一些参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/11/28/build-your-own-ui-for-skywalking/logo.jpeg&quot; width=&quot;500&quot; height=&quot;400&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;SkyWalking: an APM(application pe
      
    
    </summary>
    
      <category term="云原生" scheme="https://rovast.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://rovast.github.io/2020/11/28/hello-world/"/>
    <id>https://rovast.github.io/2020/11/28/hello-world/</id>
    <published>2020-11-28T08:49:18.064Z</published>
    <updated>2020-11-28T08:49:18.064Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install php7.2 on Ubuntu 18.04 LTS</title>
    <link href="https://rovast.github.io/2019/12/02/install-php72-ubuntu/"/>
    <id>https://rovast.github.io/2019/12/02/install-php72-ubuntu/</id>
    <published>2019-12-02T01:54:24.000Z</published>
    <updated>2020-11-28T08:49:18.065Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 php7.2</span></span><br><span class="line">sudo apt-get install php7.2 php7.2-fpm \</span><br><span class="line">php7.2-mysql php7.2-curl php7.2-mbstring php7.2-gd php7.2-xml php7.2-soap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 mcrypt</span></span><br><span class="line">sudo apt install php-dev libmcrypt-dev php-pear</span><br><span class="line">sudo pecl channel-update pecl.php.net</span><br><span class="line">sudo pecl install mcrypt-1.0.1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/php/7.2/cli/php.ini</span><br><span class="line">sudo vi /etc/php/7.2/fpm/php.ini</span><br><span class="line"><span class="comment"># 最后加上 `extension=mcrypt.so`</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/php/7.2/fpm/pool.d/www.conf</span><br><span class="line"><span class="comment"># 修改 listen 为 127.0.0.1:9000</span></span><br></pre></td></tr></table></figure><h1 id="测试-nginx-是否可用"><a href="#测试-nginx-是否可用" class="headerlink" title="测试 nginx 是否可用"></a>测试 nginx 是否可用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="Linux" scheme="https://rovast.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装</title>
    <link href="https://rovast.github.io/2019/11/28/install-docker/"/>
    <id>https://rovast.github.io/2019/11/28/install-docker/</id>
    <published>2019-11-28T09:06:18.000Z</published>
    <updated>2020-11-28T08:49:18.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装 docker</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">// 注意更改所属用户组</span><br><span class="line">sudo usermod -aG docker YOUR_GROUP</span><br></pre></td></tr></table></figure><p>注销用户后重新登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 启动　docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装 docker-compose</span><br><span class="line">sudo pip install -U docker-compose</span><br><span class="line"></span><br><span class="line">// 如果没有 pip</span><br><span class="line">sudo apt-get install python-pi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="docker" scheme="https://rovast.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度</title>
    <link href="https://rovast.github.io/2019/11/06/time-complexity/"/>
    <id>https://rovast.github.io/2019/11/06/time-complexity/</id>
    <published>2019-11-06T01:35:45.000Z</published>
    <updated>2020-11-28T08:49:18.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>技术人员的内功修炼：操作系统、计算机网络、编译原理、数据结构与算法。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度分下面几个维度：</p><ul><li>最好时间复杂度（Best Case Time Complexity）</li><li>最坏时间复杂度（Worst Case Time Complexity）</li><li>平均时间复杂度（Average Case Time Complexity）</li><li>均摊时间复杂度（Amortized Time Complexity）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;技术人员的内功修炼：操作系统、计算机网络、编译原理、数据结构与算法。&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="基础" scheme="https://rovast.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构与算法" scheme="https://rovast.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用 www-data 用户运行定时任务（cron）</title>
    <link href="https://rovast.github.io/2019/11/04/run-cron-with-www-data/"/>
    <id>https://rovast.github.io/2019/11/04/run-cron-with-www-data/</id>
    <published>2019-11-04T07:03:07.000Z</published>
    <updated>2020-11-28T08:49:18.081Z</updated>
    
    <content type="html"><![CDATA[<p>其实这个没啥好说的，就是记录下解决的过程（说得好像跟一篇水文似的…）。或者给遇到这类问题的小伙伴提供个思路。</p><h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>我们在部署 web 服务时，经常用到定时任务。正常的流程就是直接执行下面的指令来配置定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>问题来了，正常情况下，这个指令在哪个用户下面执行，这个权限就是谁的（如果你听不懂我在说啥，那基本就是属于 root的）。</p><blockquote><p>定时任务本身的配置也是个精细活，你可以阅读下 <a href="https://learnku.com/articles/25177" target="_blank" rel="noopener">https://learnku.com/articles/25177</a> 看看你之前用的姿势是不是还能优化。</p></blockquote><p><strong>常见问题之日志权限</strong></p><p>这怕是最常见的问题了。定时任务出错了，记录日志到 <code>storage/logs</code> 里了，一般就是 <code>laravel.log</code> 文件。</p><p>此时 <code>laravel.log</code> 所属者就是 root 了。</p><p>用户通过浏览器访问我们网站，如果出错，以 www-data 身份尝试记录到 <code>storage/logs/laravel.log</code>，然后<strong>写不进去</strong>，一直报错，真香！</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>打开谷歌搜索 <code>run cron job as www-data</code>。找到了文章 <a href="https://askubuntu.com/questions/189189/how-to-run-crontab-as-userwww-data" target="_blank" rel="noopener">https://askubuntu.com/questions/189189/how-to-run-crontab-as-userwww-data</a></p><p>谷歌真香！</p><p>具体的意思，就是直接在 <code>/etc/crontab</code> 中编辑定时任务即可，加上用户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/crontab: system-wide crontab</span></span><br><span class="line"><span class="comment"># Unlike any other crontab you don't have to run the `crontab'</span></span><br><span class="line"><span class="comment"># command to install the new version when you edit this file</span></span><br><span class="line"><span class="comment"># and files in /etc/cron.d. These files also have username fields,</span></span><br><span class="line"><span class="comment"># that none of the other crontabs do.</span></span><br><span class="line"></span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br><span class="line">17 *    * * *   root    <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class="line">25 6    * * *   root    <span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.daily )</span><br><span class="line">47 6    * * 7   root    <span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.weekly )</span><br><span class="line">52 6    1 * *   root    <span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.monthly )</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cron</span></span><br><span class="line">* * * * *  www-data flock /tmp/flock1.lock -c <span class="string">'timeout 200 /usr/local/bin/php /var/www/html/laravel/artisan command &gt;&gt; /home/log/laravel.log 2&gt;&amp;1'</span></span><br></pre></td></tr></table></figure><p>啰嗦下：</p><ul><li>flock 用来防止重复执行，起到原子锁作用</li><li>timeout 表示这个脚本执行过长，咱就干死它，可以有效避免各种循环或长时间占用问题</li><li><code>&gt;&gt;</code> 表示向文件中追加内容</li><li><code>2&gt;&amp;1</code> 表示将标准错误输出重定向到正确输出（这样你万一有程序出错，也能记录下）</li></ul><h2 id="真香后传（更新于-2019年11月06日19-38-27）"><a href="#真香后传（更新于-2019年11月06日19-38-27）" class="headerlink" title="真香后传（更新于 2019年11月06日19:38:27）"></a>真香后传（更新于 2019年11月06日19:38:27）</h2><p>如果你按照上述的进行，你会发现还是执行不了定时任务。因为 <code>www-data</code> 默认是不能执行 bash 相关操作的。</p><p>使用真香的谷歌搜索 <code>www-data run cron error</code>，我们发现了宝藏  <a href="https://ubuntuforums.org/showthread.php?t=2334330" target="_blank" rel="noopener">https://ubuntuforums.org/showthread.php?t=2334330</a></p><blockquote><p>The www-data user is not able to invoke a shell by default. In /etc/passwd you’ll see<br>  Code:<br>  www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>  If you want to be able to run scripts as that user, you’ll need to change “/usr/sbin/nologin” to “/bin/bash”.</p></blockquote><p>好了，咱们把 <code>/etc/passwd</code> 里面 <code>www-data</code> 对应的那一行改下就可以了。</p><p><strong>另外</strong></p><p>其实你还可以用 <code>crontab -u www-data CRON_FILE</code> 来指定用户运行指定的定时任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实这个没啥好说的，就是记录下解决的过程（说得好像跟一篇水文似的…）。或者给遇到这类问题的小伙伴提供个思路。&lt;/p&gt;
&lt;h2 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h2&gt;&lt;p&gt;我们在部署 we
      
    
    </summary>
    
      <category term="Linux" scheme="https://rovast.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://rovast.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>macos 莫名失去焦点</title>
    <link href="https://rovast.github.io/2019/10/15/macos-lost-focus/"/>
    <id>https://rovast.github.io/2019/10/15/macos-lost-focus/</id>
    <published>2019-10-15T15:05:22.000Z</published>
    <updated>2020-11-28T08:49:18.067Z</updated>
    
    <content type="html"><![CDATA[<p>执行下述 python 代码，观测除了当前应用程序外，还有谁占用了焦点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> AppKit <span class="keyword">import</span> NSWorkspace</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = range(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    activeAppName = NSWorkspace.sharedWorkspace().activeApplication()[<span class="string">'NSApplicationName'</span>]</span><br><span class="line">    <span class="keyword">print</span> activeAppName</span><br></pre></td></tr></table></figure><p>查看输出即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;执行下述 python 代码，观测除了当前应用程序外，还有谁占用了焦点&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git diff between {working dir, staged area, last commit}</title>
    <link href="https://rovast.github.io/2019/09/24/git-diff/"/>
    <id>https://rovast.github.io/2019/09/24/git-diff/</id>
    <published>2019-09-24T08:48:59.000Z</published>
    <updated>2020-11-28T08:49:18.052Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考链接： <a href="http://xahlee.info/linux/git_diff.html" target="_blank" rel="noopener">http://xahlee.info/linux/git_diff.html</a></p></blockquote><p>本文阐述 git diff 的不同用法。</p><p>git 中有三个主要区域</p><ul><li>Working Directory 工作区。当前用户正在工作的区域</li><li>Staging Area（也被叫做 cache，index）。使用 <code>git add</code> 后存放的临时位置</li><li>HEAD 指向一个 commit 位置。通常情况下，是指上一次提交</li></ul><p>上面的三个区域，都是在你本地的。每个 commit 都会有一个特定的标识（id），我们称之为 commit id。</p><h2 id="如何查看-commit"><a href="#如何查看-commit" class="headerlink" title="如何查看 commit"></a>如何查看 commit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示最近的三次 commit</span></span><br><span class="line">git log -3</span><br></pre></td></tr></table></figure><h2 id="diff-between-working-dir-staging-area"><a href="#diff-between-working-dir-staging-area" class="headerlink" title="diff between {working dir, staging area}"></a>diff between {working dir, staging area}</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> diff working dir, staging area</span></span><br><span class="line">git diff --color</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> diff working dir, staging area, 1 file</span></span><br><span class="line">git diff --color filename</span><br></pre></td></tr></table></figure><h2 id="diff-between-staging-area-last-commit"><a href="#diff-between-staging-area-last-commit" class="headerlink" title="diff between {staging area, last commit}"></a>diff between {staging area, last commit}</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> diff satging area, last commit. 其中 staged 参数也可用 cached 替代</span></span><br><span class="line">git diff --color --staged &lt;commitID&gt;</span><br></pre></td></tr></table></figure><h2 id="diff-between-last-commit-working-dir"><a href="#diff-between-last-commit-working-dir" class="headerlink" title="diff between {last commit, working dir}"></a>diff between {last commit, working dir}</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --color &lt;commitID&gt;</span><br></pre></td></tr></table></figure><h2 id="对同一分支的两个-commit-进行-diff"><a href="#对同一分支的两个-commit-进行-diff" class="headerlink" title="对同一分支的两个 commit 进行 diff"></a>对同一分支的两个 commit 进行 diff</h2><ol><li><code>git log file_name</code></li><li><code>git diff commit_ID_1 commit_ID_2 file_name</code></li></ol><h2 id="查看哪些文件被-staged-了"><a href="#查看哪些文件被-staged-了" class="headerlink" title="查看哪些文件被 staged 了"></a>查看哪些文件被 staged 了</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取当前的状态</span></span><br><span class="line">git status .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推荐使用下面的，简洁明了</span></span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考链接： &lt;a href=&quot;http://xahlee.info/linux/git_diff.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://xahlee.info/linux/git_diff.html
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://rovast.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>view-ascii-on-linux</title>
    <link href="https://rovast.github.io/2019/08/22/view-ascii-on-linux/"/>
    <id>https://rovast.github.io/2019/08/22/view-ascii-on-linux/</id>
    <published>2019-08-22T01:39:33.000Z</published>
    <updated>2020-11-28T08:49:18.090Z</updated>
    
    <content type="html"><![CDATA[<p>开发中会经常查看 ascii 表，没想到在 linux 上可以直接查看，记录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ascii</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">ASCII(7)                                                                                                            Linux Programmer<span class="string">'s Manual                                                                                                            ASCII(7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NAME</span></span><br><span class="line"><span class="string">       ascii - ASCII character set encoded in octal, decimal, and hexadecimal</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br><span class="line"><span class="string">       ASCII is the American Standard Code for Information Interchange.  It is a 7-bit code.  Many 8-bit codes (e.g., ISO 8859-1) contain ASCII as their lower half.  The international counterpart of ASCII is known as ISO 646-IRV.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       The following table contains the 128 ASCII characters.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       C program '</span>\X<span class="string">' escapes are noted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Oct   Dec   Hex   Char                        Oct   Dec   Hex   Char</span></span><br><span class="line"><span class="string">       ────────────────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="string">       000   0     00    NUL '</span>\0<span class="string">' (null character)   100   64    40    @</span></span><br><span class="line"><span class="string">       001   1     01    SOH (start of heading)      101   65    41    A</span></span><br><span class="line"><span class="string">       002   2     02    STX (start of text)         102   66    42    B</span></span><br><span class="line"><span class="string">       003   3     03    ETX (end of text)           103   67    43    C</span></span><br><span class="line"><span class="string">       004   4     04    EOT (end of transmission)   104   68    44    D</span></span><br><span class="line"><span class="string">       005   5     05    ENQ (enquiry)               105   69    45    E</span></span><br><span class="line"><span class="string">       006   6     06    ACK (acknowledge)           106   70    46    F</span></span><br><span class="line"><span class="string">       007   7     07    BEL '</span>\a<span class="string">' (bell)             107   71    47    G</span></span><br><span class="line"><span class="string">       010   8     08    BS  '</span>\b<span class="string">' (backspace)        110   72    48    H</span></span><br><span class="line"><span class="string">       011   9     09    HT  '</span>\t<span class="string">' (horizontal tab)   111   73    49    I</span></span><br><span class="line"><span class="string">       012   10    0A    LF  '</span>\n<span class="string">' (new line)         112   74    4A    J</span></span><br><span class="line"><span class="string">       013   11    0B    VT  '</span>\v<span class="string">' (vertical tab)     113   75    4B    K</span></span><br><span class="line"><span class="string">       014   12    0C    FF  '</span>\f<span class="string">' (form feed)        114   76    4C    L</span></span><br><span class="line"><span class="string">       015   13    0D    CR  '</span>\r<span class="string">' (carriage ret)     115   77    4D    M</span></span><br><span class="line"><span class="string">       016   14    0E    SO  (shift out)             116   78    4E    N</span></span><br><span class="line"><span class="string">       017   15    0F    SI  (shift in)              117   79    4F    O</span></span><br><span class="line"><span class="string">       020   16    10    DLE (data link escape)      120   80    50    P</span></span><br><span class="line"><span class="string">       021   17    11    DC1 (device control 1)      121   81    51    Q</span></span><br><span class="line"><span class="string">       022   18    12    DC2 (device control 2)      122   82    52    R</span></span><br><span class="line"><span class="string">       023   19    13    DC3 (device control 3)      123   83    53    S</span></span><br><span class="line"><span class="string">       024   20    14    DC4 (device control 4)      124   84    54    T</span></span><br><span class="line"><span class="string">       025   21    15    NAK (negative ack.)         125   85    55    U</span></span><br><span class="line"><span class="string">       026   22    16    SYN (synchronous idle)      126   86    56    V</span></span><br><span class="line"><span class="string">       027   23    17    ETB (end of trans. blk)     127   87    57    W</span></span><br><span class="line"><span class="string">       030   24    18    CAN (cancel)                130   88    58    X</span></span><br><span class="line"><span class="string">       031   25    19    EM  (end of medium)         131   89    59    Y</span></span><br><span class="line"><span class="string">       032   26    1A    SUB (substitute)            132   90    5A    Z</span></span><br><span class="line"><span class="string">       033   27    1B    ESC (escape)                133   91    5B    [</span></span><br><span class="line"><span class="string">       034   28    1C    FS  (file separator)        134   92    5C    \  '</span>\\<span class="string">'</span></span><br><span class="line"><span class="string">       035   29    1D    GS  (group separator)       135   93    5D    ]</span></span><br><span class="line"><span class="string">       036   30    1E    RS  (record separator)      136   94    5E    ^</span></span><br><span class="line"><span class="string">       037   31    1F    US  (unit separator)        137   95    5F    _</span></span><br><span class="line"><span class="string">       040   32    20    SPACE                       140   96    60    `</span></span><br><span class="line"><span class="string">       041   33    21    !                           141   97    61    a</span></span><br><span class="line"><span class="string">       042   34    22    "                           142   98    62    b</span></span><br><span class="line"><span class="string">       043   35    23    #                           143   99    63    c</span></span><br><span class="line"><span class="string">       044   36    24    $                           144   100   64    d</span></span><br><span class="line"><span class="string">       045   37    25    %                           145   101   65    e</span></span><br><span class="line"><span class="string">       046   38    26    &amp;                           146   102   66    f</span></span><br><span class="line"><span class="string">       047   39    27    '</span>                           147   103   67    g</span><br><span class="line">       050   40    28    (                           150   104   68    h</span><br><span class="line">       051   41    29    )                           151   105   69    i</span><br><span class="line">       052   42    2A    *                           152   106   6A    j</span><br><span class="line">       053   43    2B    +                           153   107   6B    k</span><br><span class="line">       054   44    2C    ,                           154   108   6C    l</span><br><span class="line">       055   45    2D    -                           155   109   6D    m</span><br><span class="line">       056   46    2E    .                           156   110   6E    n</span><br><span class="line">       057   47    2F    /                           157   111   6F    o</span><br><span class="line">       060   48    30    0                           160   112   70    p</span><br><span class="line"></span><br><span class="line">       061   49    31    1                           161   113   71    q</span><br><span class="line">       062   50    32    2                           162   114   72    r</span><br><span class="line">       063   51    33    3                           163   115   73    s</span><br><span class="line">       064   52    34    4                           164   116   74    t</span><br><span class="line">       065   53    35    5                           165   117   75    u</span><br><span class="line">       066   54    36    6                           166   118   76    v</span><br><span class="line">       067   55    37    7                           167   119   77    w</span><br><span class="line">       070   56    38    8                           170   120   78    x</span><br><span class="line">       071   57    39    9                           171   121   79    y</span><br><span class="line">       072   58    3A    :                           172   122   7A    z</span><br><span class="line">       073   59    3B    ;                           173   123   7B    &#123;</span><br><span class="line">       074   60    3C    &lt;                           174   124   7C    |</span><br><span class="line">       075   61    3D    =                           175   125   7D    &#125;</span><br><span class="line">       076   62    3E    &gt;                           176   126   7E    ~</span><br><span class="line">       077   63    3F    ?                           177   127   7F    DEL</span><br><span class="line"></span><br><span class="line">   Tables</span><br><span class="line">       For convenience, below are more compact tables <span class="keyword">in</span> hex and decimal.</span><br><span class="line"></span><br><span class="line">          2 3 4 5 6 7       30 40 50 60 70 80 90 100 110 120</span><br><span class="line">        -------------      ---------------------------------</span><br><span class="line">       0:   0 @ P ` p     0:    (  2  &lt;  F  P  Z  d   n   x</span><br><span class="line">       1: ! 1 A Q a q     1:    )  3  =  G  Q  [  e   o   y</span><br><span class="line">       2: <span class="string">" 2 B R b r     2:    *  4  &gt;  H  R  \  f   p   z</span></span><br><span class="line"><span class="string">       3: # 3 C S c s     3: !  +  5  ?  I  S  ]  g   q   &#123;</span></span><br><span class="line"><span class="string">       4: $ 4 D T d t     4: "</span>  ,  6  @  J  T  ^  h   r   |</span><br><span class="line">       5: % 5 E U e u     5: <span class="comment">#  -  7  A  K  U  _  i   s   &#125;</span></span><br><span class="line">       6: &amp; 6 F V f v     6: $  .  8  B  L  V  `  j   t   ~</span><br><span class="line">       7: <span class="string">' 7 G W g w     7: %  /  9  C  M  W  a  k   u  DEL</span></span><br><span class="line"><span class="string">       8: ( 8 H X h x     8: &amp;  0  :  D  N  X  b  l   v</span></span><br><span class="line"><span class="string">       9: ) 9 I Y i y     9: '</span>  1  ;  E  O  Y  c  m   w</span><br><span class="line">       A: * : J Z j z</span><br><span class="line">       B: + ; K [ k &#123;</span><br><span class="line">       C: , &lt; L \ l |</span><br><span class="line">       D: - = M ] m &#125;</span><br><span class="line">       E: . &gt; N ^ n ~</span><br><span class="line">       F: / ? O _ o DEL</span><br><span class="line"></span><br><span class="line">NOTES</span><br><span class="line">   History</span><br><span class="line">       An ascii manual page appeared <span class="keyword">in</span> Version 7 of AT&amp;T UNIX.</span><br><span class="line"></span><br><span class="line">       On older terminals, the underscore code is displayed as a left arrow, called backarrow, the caret is displayed as an up-arrow and the vertical bar has a hole <span class="keyword">in</span> the middle.</span><br><span class="line"></span><br><span class="line">       Uppercase  and  lowercase  characters differ by just one bit and the ASCII character 2 differs from the double quote by just one bit, too.  That made it much easier to encode characters mechanically or with a non-microcontroller-based electronic key‐</span><br><span class="line">       board and that pairing was found on old teletypes.</span><br><span class="line"></span><br><span class="line">       The ASCII standard was published by the United States of America Standards Institute (USASI) <span class="keyword">in</span> 1968.</span><br><span class="line"></span><br><span class="line">SEE ALSO</span><br><span class="line">       charsets(7), iso_8859-1(7), iso_8859-10(7), iso_8859-11(7), iso_8859-13(7), iso_8859-14(7), iso_8859-15(7), iso_8859-16(7), iso_8859-2(7),  iso_8859-3(7),  iso_8859-4(7),  iso_8859-5(7),  iso_8859-6(7),  iso_8859-7(7),  iso_8859-8(7),  iso_8859-9(7),</span><br><span class="line">       utf-8(7)</span><br><span class="line"></span><br><span class="line">COLOPHON</span><br><span class="line">       This page is part of release 4.15 of the Linux man-pages project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.</span><br><span class="line"></span><br><span class="line">Linux                                                                                                                       2016-10-08                                                                                                                   ASCII(7)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发中会经常查看 ascii 表，没想到在 linux 上可以直接查看，记录下。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
      <category term="Linux" scheme="https://rovast.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://rovast.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记录一个 ab 工具使用的小坑</title>
    <link href="https://rovast.github.io/2019/08/15/some-tricks-in-ab-benchmark/"/>
    <id>https://rovast.github.io/2019/08/15/some-tricks-in-ab-benchmark/</id>
    <published>2019-08-15T03:17:35.000Z</published>
    <updated>2020-11-28T08:49:18.083Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 ab 进行压测时，出现一个小问题：</p><p>每次请求返回的状态码都是 200，但是有大量的 failed！</p><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>首先，查询 nginx 的 access log，我们发现压测的请求返回的都是 200。这说明我们请求没有问题</p><p><strong>怀疑是 ab 工具问题</strong></p><h2 id="使用-jmeter-压测"><a href="#使用-jmeter-压测" class="headerlink" title="使用 jmeter 压测"></a>使用 jmeter 压测</h2><p>使用 jmeter 进行压测，发现请求居然都是正确的。验证是 ab 问题</p><h2 id="网上查询相应问题"><a href="#网上查询相应问题" class="headerlink" title="网上查询相应问题"></a>网上查询相应问题</h2><p><a href="https://stackoverflow.com/questions/6475692/investigating-apache-benchmark-failed-request" target="_blank" rel="noopener">https://stackoverflow.com/questions/6475692/investigating-apache-benchmark-failed-request</a></p><p>查询得到上述答案</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>使用 <code>man ab</code> 查看 ab 文档，发现果然有 -l 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l     Do not report errors <span class="keyword">if</span> the length of the responses is not constant. This can be useful <span class="keyword">for</span> dynamic pages. Available <span class="keyword">in</span> 2.4.7 and later.</span><br></pre></td></tr></table></figure><p>意思就是说， ab 默认情况下认为返回的长度不一致就记录为 error，通过 -l 参数可以取消这种设定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -l -n 50000 -c 50 xxxxxxxxxx</span><br></pre></td></tr></table></figure><p>加上参数后，可以正常压测了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用 ab 进行压测时，出现一个小问题：&lt;/p&gt;
&lt;p&gt;每次请求返回的状态码都是 200，但是有大量的 failed！&lt;/p&gt;
&lt;h2 id=&quot;排查问题&quot;&gt;&lt;a href=&quot;#排查问题&quot; class=&quot;headerlink&quot; title=&quot;排查问题&quot;&gt;&lt;/a&gt;排查问题
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="杂项" scheme="https://rovast.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm 集成 phpCodeSniffer</title>
    <link href="https://rovast.github.io/2019/08/14/phpstorm-load-phpCodeSniffer/"/>
    <id>https://rovast.github.io/2019/08/14/phpstorm-load-phpCodeSniffer/</id>
    <published>2019-08-14T10:14:02.000Z</published>
    <updated>2020-11-28T08:49:18.079Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要指导如何在 phpstorm 中集成 phpCodeSniffer（简称：phpCS）</p><ul><li>安装 phpCS</li><li>如何在 phpStorm 中加载 phpCS</li><li>如何加载自定义的 phpCS 的 xml 规则文件</li><li>如何在 php 文件中实时提示</li><li>如何根据规则实时修正</li></ul><p>phpStorm 官方指导文档：<a href="https://www.jetbrains.com/help/phpstorm/using-php-code-sniffer.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/phpstorm/using-php-code-sniffer.html</a></p><h2 id="安装-phpCS"><a href="#安装-phpCS" class="headerlink" title="安装 phpCS"></a>安装 phpCS</h2><p>安装 phpCS 有多种途径，可以参考 <a href="https://github.com/squizlabs/PHP_CodeSniffer#installation" target="_blank" rel="noopener">https://github.com/squizlabs/PHP_CodeSniffer#installation</a></p><p>我们使用 composer 方式安装，为了便于在所有项目中使用 phpCS，我们使用全局方式安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require <span class="string">"squizlabs/php_codesniffer=*"</span> -vvv</span><br></pre></td></tr></table></figure><p>安装完成后，会多出两个指令 <code>phpcs</code> 和 <code>phpcbf</code></p><h2 id="在-phpStorm-中加载-phpCS"><a href="#在-phpStorm-中加载-phpCS" class="headerlink" title="在 phpStorm 中加载 phpCS"></a>在 phpStorm 中加载 phpCS</h2><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/load-phpcs.png" title="load-phpcs.png"><p>按照截图的路径 <code>File &gt; Settings &gt; Language &amp; Framework &gt; PHP &gt; Quality Tools &gt; Code Sniffer</code>，选择 Local 后选择刚才的安装路径。</p><blockquote><p>如果不清楚刚才安装的全局路径，Linux 下可使用 <code>whereis phpcs</code> 查看路径。其他系统可自行搜索 “composer 全局 bin 目录” 获取更多帮助。</p></blockquote><blockquote><p>或者，你也可以用 <code>composer global config bin-dir --absolute</code> 来查看 composer 的 bin 目录`</p></blockquote><h2 id="加载自定义-xml-规则文件"><a href="#加载自定义-xml-规则文件" class="headerlink" title="加载自定义 xml 规则文件"></a>加载自定义 xml 规则文件</h2><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/load-rules.png" title="load-rules.png"><p>首先，需要开启 phpCodeSniffer 的验证提示，如截图所示。其次，在截图右下角，选择 custom 来加载自定义的 xml 文件。</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/load-rule-file.png" title="load-rule-file.png"><p>加载完毕后，即可正常对打开的 PHP 文件进行实时检测。</p><h2 id="实时验证-PHP-文件"><a href="#实时验证-PHP-文件" class="headerlink" title="实时验证 PHP 文件"></a>实时验证 PHP 文件</h2><p>进行上述配置后，对打开的 PHP 文件会进行实时检测。</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/warning.png" title="warning.png"><p>如图所示，对于不符合规范的代码，会进行波浪线显示，鼠标悬浮后可以看到详细说明。</p><h2 id="自动修正"><a href="#自动修正" class="headerlink" title="自动修正"></a>自动修正</h2><p>光标放置在波浪线处，按下组合键 <code>alt</code> + <code>enter</code>，选择 <code>PHP Code Beautifier and Fixer</code> 即可修正。</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/fix.png" title="fix.png"><p>修正后</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/done.png" title="done.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>结合 phpCS，我们可以在开发时实时检测团队代码规范，便于在提交前进行规范统一。</p><p>集成在 IDE 中的 phpCS 可以对打开的文件进行实时检测，如果需要对整个项目或者是指定的文件夹进行检测，可以直接使用 <code>phpcs</code> 命令进行检测，使用 <code>phpcbf</code> 进行修正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要指导如何在 phpstorm 中集成 phpCodeSniffer（简称：phpCS）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 phpCS&lt;/li&gt;
&lt;li&gt;如何在 phpStorm 中加载 phpCS&lt;/li&gt;
&lt;li&gt;如何加载自定义的 phpCS 的 xml 规则文件&lt;
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHP" scheme="https://rovast.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>sonar 初探</title>
    <link href="https://rovast.github.io/2019/08/13/start-sonar/"/>
    <id>https://rovast.github.io/2019/08/13/start-sonar/</id>
    <published>2019-08-13T07:50:16.000Z</published>
    <updated>2020-11-28T08:49:18.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>参考文档 <a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/get-started-2-minutes/</a></p></blockquote><p>sonar 由两部分组成：sonarqube 和 sonar-scanner-cli。前者是 web 端，后者是 CLI 端。下载地址如下：</p><ul><li><a href="https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.9.1.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.9.1.zip</a></li><li><a href="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip</a></li></ul><p>另外，运行 sonar 需要 jvm 环境，自行安装。ubuntu 可执行 <code>apt install openjdk-11-jdk</code></p><h2 id="运行-web-端"><a href="#运行-web-端" class="headerlink" title="运行 web 端"></a>运行 web 端</h2><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>解压 sonarqube-7.9.1.zip 后，进入 sonarqube-7.9.1 目录，执行下述指令启动，之后访问 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/linux-x86-64/sonar.sh console</span><br></pre></td></tr></table></figure><p>另外，如果需要修改配置，修改 <code>conf/sonar.properties</code> 文件即可，其中 92 行附近可以修改运行内存</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar.web.javaOpts=-Xmx5000m -Xms5000m -XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure><h3 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h3><p>访问 <a href="http://localhost:9000，登录信息" target="_blank" rel="noopener">http://localhost:9000，登录信息</a></p><ul><li>用户名  admin</li><li>密码  admin</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>点击右上角加号，创建项目，输入项目名称、token 信息后，会显示一个指令，用户</p><img src="/2019/08/13/start-sonar/1565679757086.png" title="1565679757086.png"><h2 id="进行代码扫描"><a href="#进行代码扫描" class="headerlink" title="进行代码扫描"></a>进行代码扫描</h2><p>之前我们安装了 <code>sonar-scanner-cli-4.0.0.1744-linux.zip</code>，解压后，增加 <code>bin</code> 到环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/rovast/Software/sonar-scanner-4.0.0.1744-linux/bin</span><br></pre></td></tr></table></figure><p>然后使其生效 <code>source ~/.bashrc</code> 或者 <code>source ~/.zshrc</code></p><p>根据上一步的提示，进入到需要扫描的项目录，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner \</span><br><span class="line">  -Dsonar.projectKey=laravel-framework \</span><br><span class="line">  -Dsonar.sources=. \</span><br><span class="line">  -Dsonar.host.url=http://localhost:9000 \</span><br><span class="line">  -Dsonar.login=0273f96b7dd12e0790ab2350b4c497fcedff6b36</span><br></pre></td></tr></table></figure><p>等待运行结束后，web 端会自动加载对应报告进行分析</p><h2 id="查看分析报告"><a href="#查看分析报告" class="headerlink" title="查看分析报告"></a>查看分析报告</h2><img src="/2019/08/13/start-sonar/1565682032497.png" title="1565682032497.png"><img src="/2019/08/13/start-sonar/1565682259708.png" title="1565682259708.png"><h2 id="自定义检测规则"><a href="#自定义检测规则" class="headerlink" title="自定义检测规则"></a>自定义检测规则</h2><p>参考 <a href="https://docs.sonarqube.org/latest/analysis/languages/php/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/analysis/languages/php/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结起来，sonar 的特点就是功能强大。</p><ul><li>支持的语言丰富，主流的开发语言基本都支持了</li><li>web 界面友好，可以很清晰地查看报告和分析</li><li>分析的指标丰富：安全性、技术负债、覆盖度、主流规则等等</li><li>marketplace</li></ul><p>除了上述有点外，sonar 也有一些其他方面待考量的地方</p><ul><li>sonar 是基于 java 开发，如果需要拓展其中的规则，需要了解 java 体系</li><li>sonar 本身是一个成熟的产品，如果基于这个来自定义工作流，难度较大</li><li>sonar 资源占用较大</li></ul><p>所以如果需要一套成熟的代码检测相关工具，sonar 是个不错的选择。</p><p>sonar 和 phpCodeSinffer 对比</p><ul><li><a href="https://github.com/SonarSource/sonarqube" target="_blank" rel="noopener">https://github.com/SonarSource/sonarqube</a></li><li><a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank" rel="noopener">https://github.com/squizlabs/PHP_CodeSniffer</a></li></ul><p>最大的区别</p><ul><li>sonar 是一个产品提供了完善的解决方案</li><li>phpCodeSniffer 是一个工具，专注于 php 语法检查</li></ul><p>拓展性</p><ul><li>sonar 是成套的解决方案，可定制化程序较低。需要在 sonar 现有的 rules 中组合自己的 rule，或者在 marketPlace 中找到合适的组件。</li><li>如果需要开发完全自定义的规则，可参考 <a href="https://docs.sonarqube.org/latest/analysis/languages/php/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/analysis/languages/php/</a> ，使用 java 开发对应的规则</li><li><p>如果基于 sonar 来构建自己的工作流，可行性较低。因为他本身是个产品，所有功能都集成了，有自己的一套思想</p></li><li><p>phpCodeSniffer 是基于 PHP 的一套语法检测工具</p></li><li>phpCodeSniffer 预留了语法检查的接口和类。如果需要自定义规则，实现对应的接口或类即可，较为简单</li><li>如果基于 phpCS 来构建自己工作流，较为现实。毕竟它只是个工具</li><li>另外，phpCS 有基于 IDE 的一些插件，可以集成到编辑器中实时检查</li></ul><p>总结</p><ul><li>如果只是做语法检查，并且希望高度自定义，推荐使用 phpCodeSniffer</li><li>如果对定制化程度没有要求，希望有个工具开箱即用，并且也无后续定制需求，可使用 sonar</li><li>【推荐】使用 phpCS，这样便于后期和也无框架高度集成，便于做更多贴合框架和业务的检测。比如业务级别调用规范等</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参考文档 &lt;a href=&quot;https://docs.sonarqube.org/latest/setup/get
      
    
    </summary>
    
    
      <category term="杂项" scheme="https://rovast.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>记一次 C# aes 加密转 php</title>
    <link href="https://rovast.github.io/2019/06/28/c-sharp-aes-to-php-note/"/>
    <id>https://rovast.github.io/2019/06/28/c-sharp-aes-to-php-note/</id>
    <published>2019-06-28T03:35:53.000Z</published>
    <updated>2020-11-28T08:49:18.044Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次 C#  转 PHP 中遇到的一个问题。</p><p>描述：aes-128-cbc 的 c# 转 php</p><p>c# 代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Security.Cryptography;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace Rextester &#123;</span><br><span class="line">    class Program &#123;</span><br><span class="line">        public static string EncryptAES (string key, string content) &#123;</span><br><span class="line">            // 关键代码</span><br><span class="line">            using (var aes = new RijndaelManaged ()) &#123;</span><br><span class="line">                aes.BlockSize = 128;</span><br><span class="line">                aes.IV = iv;</span><br><span class="line">                aes.Key = key;</span><br><span class="line">                aes.Mode = CipherMode.CBC;</span><br><span class="line">                aes.Padding = PaddingMode.PKCS7;</span><br><span class="line">                var cryptoTransform = aes.CreateEncryptor ();</span><br><span class="line">                var resultArray = cryptoTransform.TransformFinalBlock (content, 0, content.Length);</span><br><span class="line">                aes.Clear ();</span><br><span class="line">                return Convert.ToBase64String (result, 0, result.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public static void Main (string[] args) &#123;</span><br><span class="line">            Console.Write (EncryptAES (&quot;abcd&quot;, &quot;1234&quot;));</span><br><span class="line">            Console.Read ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PHP 代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myEncrypt</span><span class="params">($key, $content)</span></span>&#123;</span><br><span class="line">    <span class="comment">// AES-128-CBC AES-192-CBC AES-256-CBC</span></span><br><span class="line">    <span class="keyword">return</span> base64_encode(openssl_encrypt($content,<span class="string">'AES-128-CBC'</span>, base64_encode(md5($key,<span class="keyword">true</span>)), OPENSSL_RAW_DATA, $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myEncrypt(<span class="string">'abcd'</span>, <span class="string">'efg'</span>);</span><br></pre></td></tr></table></figure></p><p>注意点说明</p><ol><li><p><code>OPENSSL_RAW_DATA</code> 对应的是 PKCS7</p></li><li><p><code>AES-128-CBC</code> 两个语言处理不一致</p></li></ol><ul><li>对于 PHP 而言，因为所使用的是 aes-128-cbc，所以 key length 需要是 128bits 才行。所以 php 会自动截取 $key，即 <code>substr($key, 0, 16)</code>;</li><li>对于刚才的 C# 而言，可不一样了，如果 key length 大于 128bits，他会自动填充0，最后变为 aes-cbc-192，此时，php对应的方法也要改。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一次 C#  转 PHP 中遇到的一个问题。&lt;/p&gt;
&lt;p&gt;描述：aes-128-cbc 的 c# 转 php&lt;/p&gt;
&lt;p&gt;c# 代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>composer 私有化备忘录</title>
    <link href="https://rovast.github.io/2019/06/20/make-composer-private/"/>
    <id>https://rovast.github.io/2019/06/20/make-composer-private/</id>
    <published>2019-06-20T01:41:18.000Z</published>
    <updated>2020-11-28T08:49:18.067Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，正常情况下，我们使用 <code>composer install</code> 时，是从 <a href="https://packagist.org/" target="_blank" rel="noopener">https://packagist.org/</a> 拉取的 package.<br>如果设置了 <em>中国镜像</em>，那么就会从你的镜像地址拉取。</p><p>处于一些需要，我们往往需要引用自己开发的 composer package。如果是公用还好，我们直接结合 <a href="https://github.com/" target="_blank" rel="noopener">github</a> 和 <a href="https://packagist.org/" target="_blank" rel="noopener">packagist</a> 发布共有的镜像就好了。</p><p>那如果我们使用的是自建的 git 服务（如： gitlab 或者 gogs）开发的 composer package，并且是私有，咋办？</p><p>本文描述的是 <strong>不搭建私有 composer服务器</strong> 的方式来使用私有包。</p><h2 id="全局包"><a href="#全局包" class="headerlink" title="全局包"></a>全局包</h2><p>比如我们开发了全局的脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许 http 源</span></span><br><span class="line">composer config --global secure-http <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加本项目的源</span></span><br><span class="line">composer config --global repositories.package vcs http://gitlab.yourhost.com/package.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">composer global require vendor/package -vvv</span><br></pre></td></tr></table></figure><h2 id="非全局包"><a href="#非全局包" class="headerlink" title="非全局包"></a>非全局包</h2><p>修改调用方的 composer.json 即可，关键字段设置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"repositories"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"vcs"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://gitlab.yourhost.com/package.git"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"require"</span>: &#123;</span><br><span class="line">    <span class="attr">"vendor/name"</span>: <span class="string">"dev-master"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"secure-http"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行下述指令即可安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install -vvv</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>secure-http</code> 允许使用 http 协议的源</li><li><code>vendor/name</code> 对应的是自己开发的 composer 包中的 composer.json 中定义的 name 字段</li><li><code>dev-master</code> 表示和 master 分支保持一致。正常情况下，我们应该打 tag（或者又叫 release）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道，正常情况下，我们使用 &lt;code&gt;composer install&lt;/code&gt; 时，是从 &lt;a href=&quot;https://packagist.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://packagist.org/
      
    
    </summary>
    
      <category term="编程" scheme="https://rovast.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PHP" scheme="https://rovast.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>WDCP 和 Yapi 配置问题小记</title>
    <link href="https://rovast.github.io/2019/06/18/yapi-deploy-note/"/>
    <id>https://rovast.github.io/2019/06/18/yapi-deploy-note/</id>
    <published>2019-06-18T09:39:25.000Z</published>
    <updated>2020-11-28T08:49:18.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx-反响代理配置"><a href="#Nginx-反响代理配置" class="headerlink" title="Nginx 反响代理配置"></a>Nginx 反响代理配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name api.wugee.vip; </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name api.wugee.vip;</span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      cert/api.wugee.vip.pem;</span><br><span class="line">    ssl_certificate_key  cert/api.wugee.vip.key;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yapi-服务启动"><a href="#yapi-服务启动" class="headerlink" title="yapi 服务启动"></a>yapi 服务启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start yapi-app/server/app.js</span><br></pre></td></tr></table></figure><h2 id="系统自启动的-mongo-服务替换为自己原来的-mongo"><a href="#系统自启动的-mongo-服务替换为自己原来的-mongo" class="headerlink" title="系统自启动的 mongo 服务替换为自己原来的 mongo"></a>系统自启动的 mongo 服务替换为自己原来的 mongo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ax | grep mongod <span class="comment"># 查老服务</span></span><br><span class="line"><span class="built_in">kill</span> -9 ID <span class="comment"># 杀</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mongod -f /etc/mongod.conf <span class="comment"># 启动新的</span></span><br></pre></td></tr></table></figure><p>可以用下述命令看下 mongo 数据对不对<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show dbs;</span><br><span class="line">use yapi;</span><br><span class="line">db.user.find()</span><br></pre></td></tr></table></figure></p><h2 id="重启-pm2-服务"><a href="#重启-pm2-服务" class="headerlink" title="重启 pm2 服务"></a>重启 pm2 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 list <span class="comment"># 查看任务 id</span></span><br><span class="line">pm2 restart 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Nginx-反响代理配置&quot;&gt;&lt;a href=&quot;#Nginx-反响代理配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx 反响代理配置&quot;&gt;&lt;/a&gt;Nginx 反响代理配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>fix-ios-keyboard-in-webpage</title>
    <link href="https://rovast.github.io/2019/06/14/fix-ios-keyboard-in-webpage/"/>
    <id>https://rovast.github.io/2019/06/14/fix-ios-keyboard-in-webpage/</id>
    <published>2019-06-14T01:59:07.000Z</published>
    <updated>2020-11-28T08:49:18.051Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修复 IOS 键盘弹出空白的问题</span></span><br><span class="line"><span class="keyword">let</span> ua = <span class="built_in">window</span>.navigator.userAgent;</span><br><span class="line"><span class="keyword">let</span> app = <span class="built_in">window</span>.navigator.appVersion;</span><br><span class="line"><span class="comment">//$alert('浏览器版本: ' + app + '\n' + '用户代理: ' + ua);</span></span><br><span class="line"><span class="keyword">if</span> (!!ua.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>)) &#123;</span><br><span class="line">    <span class="comment">//$alert('ios端');</span></span><br><span class="line">    $(<span class="string">"input,textarea"</span>).on(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currentPosition, timer;</span><br><span class="line">        <span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            currentPosition = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">            currentPosition -= speed;</span><br><span class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, currentPosition);<span class="comment">//页面向上滚动</span></span><br><span class="line">            currentPosition += speed;</span><br><span class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, currentPosition);<span class="comment">//页面向下滚动</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ua.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || ua.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//$alert('android端');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="移动端" scheme="https://rovast.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 桌面版使用备忘</title>
    <link href="https://rovast.github.io/2019/06/13/getting-star-with-ubuntu-desktop/"/>
    <id>https://rovast.github.io/2019/06/13/getting-star-with-ubuntu-desktop/</id>
    <published>2019-06-13T01:53:06.000Z</published>
    <updated>2020-11-28T08:49:18.051Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了使用 ubuntu 桌面版过程中的一些常见问题和初始化步骤。</p><h2 id="桌面美化"><a href="#桌面美化" class="headerlink" title="桌面美化"></a>桌面美化</h2><h3 id="挪动关闭按钮至左侧"><a href="#挪动关闭按钮至左侧" class="headerlink" title="挪动关闭按钮至左侧"></a>挪动关闭按钮至左侧</h3><p>首先安装 <code>gnome-tweak-tool</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p>安装完成后，打开软件：</p><ul><li>选择“窗口”菜单</li><li>更改“标题栏按钮 - 放置”，设置为“左”即可</li></ul><h3 id="更改顶部-bar-显示方式为-unity-风格"><a href="#更改顶部-bar-显示方式为-unity-风格" class="headerlink" title="更改顶部 bar 显示方式为 unity 风格"></a>更改顶部 bar 显示方式为 unity 风格</h3><p>安装 <code>unite</code> gnome 拓展（怎么安装，参考 gnome 章节），然后启用即可。</p><img src="/2019/06/13/getting-star-with-ubuntu-desktop/bar.png" title="bar"><h3 id="使用思源宋体"><a href="#使用思源宋体" class="headerlink" title="使用思源宋体"></a>使用思源宋体</h3><p>进入 <code>https://github.com/adobe-fonts/source-han-serif/tree/release</code> ，下载</p><p><code>OTF/SimplifiedChinese/SourceHanSerifSC-Regular.otf</code></p><p>下载完成后双击打开安装即可。</p><p>安装完成后，可以在 <code>gnome-tweak</code> 中设置字体。</p><hr><h2 id="gnome-相关"><a href="#gnome-相关" class="headerlink" title="gnome 相关"></a>gnome 相关</h2><h3 id="安装-gnome-shell-extension"><a href="#安装-gnome-shell-extension" class="headerlink" title="安装 gnome shell extension"></a>安装 gnome shell extension</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-shell-extensions</span><br><span class="line">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure><p>然后安装 chrome 拓展 <code>GNOME Shell integration</code></p><blockquote><p>我一般使用  chromium-browser 安装拓展，貌似之前用 chrome 有问题</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install  chromium-browser</span><br></pre></td></tr></table></figure><p>之后在 <a href="https://extensions.gnome.org/" target="_blank" rel="noopener">https://extensions.gnome.org/</a> 就能愉快的安装拓展了。</p><hr><h2 id="常用应用"><a href="#常用应用" class="headerlink" title="常用应用"></a>常用应用</h2><h3 id="albert（类似-MacOS-的-alfred）"><a href="#albert（类似-MacOS-的-alfred）" class="headerlink" title="albert（类似 MacOS 的 alfred）"></a>albert（类似 MacOS 的 alfred）</h3><img src="/2019/06/13/getting-star-with-ubuntu-desktop/albert.png" title="albert"><p>参考文章 <a href="https://software.opensuse.org/download.html?project=home:manuelschneid3r&amp;package=albert" target="_blank" rel="noopener">《安装软件包 albert》</a></p><p>执行的操作为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">"echo 'deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_18.04/ /' &gt; /etc/apt/sources.list.d/home:manuelschneid3r.list"</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install albert</span><br></pre></td></tr></table></figure></p><p><strong>设置</strong></p><ul><li>hotkey 设置为 <code>alt</code> + ‘space’</li><li>extensions 打开 <code>applications</code> <code>calculator</code></li></ul><h3 id="微信、企业微信、微信开发者工具"><a href="#微信、企业微信、微信开发者工具" class="headerlink" title="微信、企业微信、微信开发者工具"></a>微信、企业微信、微信开发者工具</h3><p>主要参考 <a href="https://github.com/wszqkzqk/deepin-wine-ubuntu" target="_blank" rel="noopener">wszqkzqk/deepin-wine-ubuntu</a></p><ol><li>安装一些依赖环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/wszqkzqk/deepin-wine-ubuntu/master/online_install.sh | bash -e</span><br></pre></td></tr></table></figure><ol start="2"><li><p>去 <a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/" target="_blank" rel="noopener">阿里云镜像</a> 下载所需安装包</p></li><li><p>使用 <code>dpkg</code> 指令安装</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">sudo dpkg -i package.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现软件安装依赖问题，使用此指令 fix</span></span><br><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure><p><strong>托盘通知</strong> 需要安装 Gnome Shell 插件：<a href="https://extensions.gnome.org/extension/1031/topicons/" target="_blank" rel="noopener">TopIcons Plus</a>，参考 gnome 章节</p><h3 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h3><p>钉钉使用的是 <a href="https://github.com/nashaofu/dingtalk" target="_blank" rel="noopener">nashaofu/dingtalk</a> 的包。</p><ol><li>去 <a href="https://github.com/nashaofu/dingtalk/releases" target="_blank" rel="noopener">release 页面</a> 下载对应 deb 包</li><li><code>dkpg -i</code> 安装即可</li></ol><p><strong>注意</strong> 正确选择符合自己操作系统版本的 deb 包。</p><h3 id="Typora（跨平台-markdown-编辑器）"><a href="#Typora（跨平台-markdown-编辑器）" class="headerlink" title="Typora（跨平台 markdown 编辑器）"></a>Typora（跨平台 markdown 编辑器）</h3><p><a href="https://typora.io/#linux" target="_blank" rel="noopener">官方安装说明</a></p><p>一些使用小窍门</p><ul><li>你可以在网页上复制你喜欢的文章，然后到编辑器第 view 模式下粘贴，在切换到 source 模式下，就能看到转义好的 markdown 了<blockquote><p>而且， <strong>图片路径</strong> 会自动加上</p></blockquote></li></ul><hr><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我们采取编译安装的方式安装 nginx。先去官网下载压缩包，解压。</p><p>在执行 <code>configure</code> 前，需要安装一些依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev</span><br></pre></td></tr></table></figure><p>紧接着，正常安装即可，我安装的时候没有增加额外的配置，直接用的默认配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装完，相关路径如下</p><ul><li>可执行文件目录 <code>/usr/local/nginx/sbin</code></li><li>配置目录 <code>/usr/local/nginx/conf</code></li></ul><blockquote><p>为了方便使用 <code>nginx</code> 指令，我们可以在 <code>/usr/local/bin</code> 下创建软连接。</p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>为了方便使用，我们进行一下小配置。</p><p>我们在 <code>/usr/local/nginx/conf/nginx.conf</code> 的结尾处增加 <code>include servers/*;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">     include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们只需要在 <code>/usr/local/nginx/conf/servers</code> 目录下配置站点信息即可。</p><p>我们新建下 <code>/usr/local/nginx/conf/servers</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/<span class="built_in">local</span>/nginx/conf/servers</span><br></pre></td></tr></table></figure><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="phpstorm"><a href="#phpstorm" class="headerlink" title="phpstorm"></a>phpstorm</h3><p>正常的操作是直接在官方上下载压缩包，解压即可。有意思的是，直接使用浏览器下载速度反而一般，这里我们获取到下载地址，使用 <code>wget</code> 下载，速度反而快。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.jetbrains.8686c.com/webide/PhpStorm-2019.1.2.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成后，正常解压，在 <code>bin</code> 目录下执行脚本即可。</p><h3 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h3><p>同 phpstorm 的操作，只是下载地址不同罢了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.jetbrains.8686c.com/webstorm/WebStorm-2019.1.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="git-emoji"><a href="#git-emoji" class="headerlink" title="git emoji"></a>git emoji</h3><p>花里胡哨的提交你的 git 代码</p><ul><li>github 地址 <a href="https://github.com/carloscuesta/gitmoji-cli" target="_blank" rel="noopener">carloscuesta/gitmoji-cli</a></li></ul><img src="/2019/06/13/getting-star-with-ubuntu-desktop/gitmoji.png" title="gitmoji"><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g gitmoji-cli</span><br></pre></td></tr></table></figure><p><strong>配置 emoji 展示方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gitmoji -g</span><br><span class="line">? Enable automatic <span class="string">"git add ."</span> No</span><br><span class="line">? Choose Issue Format github</span><br><span class="line">? Select how emojis should be used <span class="keyword">in</span> commits 😄</span><br><span class="line">? Enable signed commits No</span><br></pre></td></tr></table></figure><p><strong>设定 alias</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gmc=<span class="string">"gitmoji -c"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文记录了使用 ubuntu 桌面版过程中的一些常见问题和初始化步骤。&lt;/p&gt;
&lt;h2 id=&quot;桌面美化&quot;&gt;&lt;a href=&quot;#桌面美化&quot; class=&quot;headerlink&quot; title=&quot;桌面美化&quot;&gt;&lt;/a&gt;桌面美化&lt;/h2&gt;&lt;h3 id=&quot;挪动关闭按钮至左侧&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="ubuntu" scheme="https://rovast.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>使用 KCP 来加速流量</title>
    <link href="https://rovast.github.io/2019/06/11/use-kcp/"/>
    <id>https://rovast.github.io/2019/06/11/use-kcp/</id>
    <published>2019-06-11T02:55:10.000Z</published>
    <updated>2020-11-28T08:49:18.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 KCP 可以加速 SS 的流量，所以在安装 kcp 对应服务前，请先确定已经正常安装了 shadowsocket，可以参考 <a href="./install-shadowsocks.md">《科学上网之 Shadowsocks 安装及优化加速》</a></p><p>我们假设 ss 的对应配置如下</p><ul><li>IP 1.1.1.1</li><li>port 12984</li><li>password 112233</li><li>加密方式  chacha20</li></ul><h2 id="安装-kcp-server-端软件"><a href="#安装-kcp-server-端软件" class="headerlink" title="安装 kcp server 端软件"></a>安装 kcp server 端软件</h2><p>我们使用一键脚本安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kuoruan/kcptun_installer/master/kcptun.sh</span><br><span class="line"></span><br><span class="line">chmod +x ./kcptun.sh</span><br><span class="line"></span><br><span class="line">./kcptun.sh</span><br></pre></td></tr></table></figure><p>基本上一路回车就好了，最后会输出一个成功的信息，记得保存为单独的文件，后面用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">恭喜! Kcptun 服务端安装成功。</span><br><span class="line">服务器IP:  1.1.1.1</span><br><span class="line">端口:  29900</span><br><span class="line">加速地址:  127.0.0.1:12984</span><br><span class="line">key:  111111</span><br><span class="line">crypt:  aes</span><br><span class="line">mode:  fast</span><br><span class="line">mtu:  1350</span><br><span class="line">sndwnd:  512</span><br><span class="line">rcvwnd:  512</span><br><span class="line">datashard:  10</span><br><span class="line">parityshard:  3</span><br><span class="line">dscp:  0</span><br><span class="line">nocomp:  false</span><br><span class="line">quiet:  false</span><br><span class="line"></span><br><span class="line">当前安装的 Kcptun 版本为: 20190515</span><br><span class="line">请自行前往:</span><br><span class="line">  https://github.com/xtaci/kcptun/releases/tag/v20190515</span><br><span class="line">手动下载客户端文件</span><br><span class="line"></span><br><span class="line">可使用的客户端配置文件为:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;localaddr&quot;: &quot;:12984&quot;,</span><br><span class="line">  &quot;remoteaddr&quot;: &quot;1.1.1.1:29900&quot;,</span><br><span class="line">  &quot;key&quot;: &quot;111111&quot;,</span><br><span class="line">  &quot;crypt&quot;: &quot;aes&quot;,</span><br><span class="line">  &quot;mode&quot;: &quot;fast&quot;,</span><br><span class="line">  &quot;mtu&quot;: 1350,</span><br><span class="line">  &quot;sndwnd&quot;: 512,</span><br><span class="line">  &quot;rcvwnd&quot;: 512,</span><br><span class="line">  &quot;datashard&quot;: 10,</span><br><span class="line">  &quot;parityshard&quot;: 3,</span><br><span class="line">  &quot;dscp&quot;: 0,</span><br><span class="line">  &quot;nocomp&quot;: false,</span><br><span class="line">  &quot;quiet&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">手机端参数可以使用:</span><br><span class="line">  key=111111;crypt=aes;mode=fast;mtu=1350;sndwnd=512;rcvwnd=512;datashard=10;parityshard=3;dscp=0</span><br><span class="line"></span><br><span class="line">Kcptun 安装目录: /usr/local/kcptun</span><br><span class="line"></span><br><span class="line">已将 Supervisor 加入开机自启,</span><br><span class="line">Kcptun 服务端会随 Supervisor 的启动而启动</span><br><span class="line"></span><br><span class="line">更多使用说明: ./kcptun.sh help</span><br><span class="line"></span><br><span class="line">如果这个脚本帮到了你，你可以请作者喝瓶可乐:</span><br><span class="line">  https://blog.kuoruan.com/donate</span><br></pre></td></tr></table></figure><p>kcp 服务使用 supervisor 来管理，用于守护进程。安装完成后，可用的命令为</p><ul><li>启动 kcptun <code>supervisorctl start kcptun</code></li><li>重启 kcptun <code>supervisorctl restart kcptun</code></li><li>关闭 kcptun <code>supervisorctl stop kcptun</code></li><li>查看 kcptun 日志 <code>./kcptun.sh log</code></li></ul><h2 id="安装-kcptun-的客户端软件"><a href="#安装-kcptun-的客户端软件" class="headerlink" title="安装 kcptun 的客户端软件"></a>安装 kcptun 的客户端软件</h2><p>kcptun 支持丰富的客户端支持</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p><code>https://github.com/xtaci/kcptun/releases</code> 地址下载对应的 Linux 版本，解压后有可执行文件。</p><p>我下载的是 <code>kcptun-linux-386-20190515.tar.gz</code></p><h4 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h4><p><code>config.json</code>，这个文件就是安装 <code>kcptun</code> 成功后的提示文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"localaddr"</span>: <span class="string">"127.0.0.1:2080"</span>,</span><br><span class="line">    <span class="attr">"remoteaddr"</span>: <span class="string">"1.1.1.1:29900"</span>,</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"111111"</span>,</span><br><span class="line">    <span class="attr">"crypt"</span>: <span class="string">"aes"</span>,</span><br><span class="line">    <span class="attr">"mode"</span>: <span class="string">"fast"</span>,</span><br><span class="line">    <span class="attr">"conn"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"autoexpire"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"mtu"</span>: <span class="number">1350</span>,</span><br><span class="line">    <span class="attr">"sndwnd"</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="attr">"rcvwnd"</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="attr">"datashard"</span>: <span class="number">70</span>,</span><br><span class="line">    <span class="attr">"parityshard"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"dscp"</span>: <span class="number">46</span>,</span><br><span class="line">    <span class="attr">"nocomp"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"acknodelay"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"nodelay"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"interval"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="attr">"resend"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"nc"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"sockbuf"</span>: <span class="number">4194304</span>,</span><br><span class="line">    <span class="attr">"keepalive"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建立客户端服务"><a href="#建立客户端服务" class="headerlink" title="建立客户端服务"></a>建立客户端服务</h4><p>执行以下指令建立链接，同时在服务器端，使用 <code>./kcptun.sh log</code> 可以看到日志输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./client_linux_386 -c config.json --quiet</span><br></pre></td></tr></table></figure><h4 id="配置客户端-shadowsocket"><a href="#配置客户端-shadowsocket" class="headerlink" title="配置客户端 shadowsocket"></a>配置客户端 shadowsocket</h4><ul><li>服务器地址 127.0.0.1</li><li>服务器端口 2080</li><li>密钥 112233</li><li>本地地址 127.0.0.1</li><li>本地端口 1080</li><li>本地服务器类型 socket5</li><li>加密方式 chacha20</li></ul><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>MacOS 的 shadowsockets-NG 软件的最新版已经内嵌了 kcptun 插件，比较简单</p><h4 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h4><p>下载最新版的软件，在下面的链接中，下载 ShadowsocksX-NG.app.1.8.2.zip，解压后有个 app 文件，挪动到「应用程序」</p><p><code>https://github.com/shadowsocks/ShadowsocksX-NG/releases</code></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>正常配置 shadowsockets 的链接即可，需要配置插件和插件配置如下</p><ul><li>服务器 1.1.1.1</li><li>端口 29900</li><li>加密方式 chacha20</li><li>密码 112233</li><li>插件 kcptun</li><li>配置 key=111111;crypt=aes;mode=fast;mtu=1350;sndwnd=512;rcvwnd=512;datashard=10;parityshard=3;dscp=0</li></ul><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h4><p>需要下载两个软件，小飞机和 kcptun</p><ul><li>shadowsocks-android <code>https://github.com/shadowsocks/shadowsocks-android/releases</code></li></ul><blockquote><p>我的是 shadowsocks-arm64-v8a-4.8.0.apk</p></blockquote><ul><li>kcptun android <code>https://github.com/shadowsocks/kcptun-android/releases</code></li></ul><blockquote><p>安装完 kcptun 是没有图标的，这是 shadowsockets 的关联启动<br>华为手机需要在手机管家中设置 kcptun 允许关联启动，不然会提示链接不上服务器</p></blockquote><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>安卓小飞机的配置</p><ul><li>服务器 1.1.1.1</li><li>远程端口 29900</li><li>密码 112233</li><li>加密方式 chacha20</li><li>插件 kcptun</li><li>配置 key=111111;crypt=aes;mode=fast;mtu=1350;sndwnd=512;rcvwnd=512;datashard=10;parityshard=3;dscp=0</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.gblm.net/209.html" target="_blank" rel="noopener">《一步一步教你用Kcptun给Shadowsocks加速！看YouTube1080P一点都不卡！》</a></li><li><a href="https://blog.kuoruan.com/111.html" target="_blank" rel="noopener">《Shadowsocks-Android客户端上的KCP配置说明》</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用 KCP 可以加速 SS 的流量，所以在安装 kcp 对应服务前，请先确定已经正常安装了 shadowsocket，可以参考 &lt;a hr
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>RFC793 TCP 协议</title>
    <link href="https://rovast.github.io/2019/05/17/rfc793-transmission-control-protocol/"/>
    <id>https://rovast.github.io/2019/05/17/rfc793-transmission-control-protocol/</id>
    <published>2019-05-17T01:51:05.000Z</published>
    <updated>2020-11-28T08:49:18.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>PREFACE（引言）</p><ol><li><p>INTRODUCTION （简介）</p><p>1.1  Motivation （动机）<br>1.2  Scope （范围）<br>1.3  About This Document （关于此文档）<br>1.4  Interfaces （接口）<br>1.5  Operation （操作）</p></li><li><p>PHILOSOPHY （设计理念）</p><p>2.1  Elements of the Internetwork System （网络系统要素）<br>2.2  Model of Operation （操作模型）<br>2.3  The Host Environment （HOST 环境）<br>2.4  Interfaces （接口）<br>2.5  Relation to Other Protocols （和其他协议的关系）<br>2.6  Reliable Communication （可靠通信）<br>2.7  Connection Establishment and Clearing （链接的建立和清除）<br>2.8  Data Communication （数据通信）<br>2.9  Precedence and Security （优先权和安全性）<br>2.10 Robustness Principle （健壮性原则）</p></li><li><p>FUNCTIONAL SPECIFICATION （功能规范）</p><p>3.1  Header Format （Header 格式）<br>3.2  Terminology （专业术语）<br>3.3  Sequence Numbers （序号说明）<br>3.4  Establishing a connection （建立一个链接）<br>3.5  Closing a Connection （断开一个链接）<br>3.6  Precedence and Security （优先级和安全性）<br>3.7  Data Communication （数据通信）<br>3.8  Interfaces （接口）<br>3.9  Event Processing （事件处理）</p></li></ol><p>GLOSSARY （术语表）</p><p>REFERENCES （引用）</p></blockquote><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                                PREFACE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This document describes the DoD Standard Transmission Control Protocol</span><br><span class="line">(TCP).  There have been nine earlier editions of the ARPA TCP</span><br><span class="line">specification on which this standard is based, and the present text</span><br><span class="line">draws heavily from them.  There have been many contributors to this work</span><br><span class="line">both in terms of concepts and in terms of text.  This edition clarifies</span><br><span class="line">several details and removes the end-of-letter buffer-size adjustments,</span><br><span class="line">and redescribes the letter mechanism as a push function.</span><br><span class="line"></span><br><span class="line">                                                           Jon Postel</span><br><span class="line"></span><br><span class="line">                                                           Editor</span><br></pre></td></tr></table></figure><hr><h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><p>The Transmission Control Protocol (TCP) is intended for use as a highly<br>reliable host-to-host protocol between hosts in packet-switched computer<br>communication networks, and in interconnected systems of such networks.</p><blockquote><p>传输控制协议(TCP)的目的，是在 包交换计算机通信网络 和 此类网络的互连系统中，<br>为主机间的通信提供可靠的协议。</p></blockquote><p>This document describes the functions to be performed by the<br>Transmission Control Protocol, the program that implements it, and its<br>interface to programs or users that require its services.</p><blockquote><p>本文档描述传输控制协议要执行的功能、实现该协议的程序、以及需要其服务的程序或用户的接口。</p></blockquote><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Computer communication systems are playing an increasingly important<br>role in military, government, and civilian environments.  This<br>document focuses its attention primarily on military computer<br>communication requirements, especially robustness in the presence of<br>communication unreliability and availability in the presence of<br>congestion, but many of these problems are found in the civilian and<br>government sector as well.</p><blockquote><p>计算机通信系统在军事、政府和民用环境中发挥着越来越重要的作用。<br>本文件主要关注军用计算机通信需求，特别是在通信不可靠和存在拥塞时的健壮性和可用性，但其中许多问题也存在于民用和政府部门。</p></blockquote><p>As strategic and tactical computer communication networks are<br>developed and deployed, it is essential to provide means of<br>interconnecting them and to provide standard interprocess<br>communication protocols which can support a broad range of<br>applications.  In anticipation of the need for such standards, the<br>Deputy Undersecretary of Defense for Research and Engineering has<br>declared the Transmission Control Protocol (TCP) described herein to<br>be a basis for DoD-wide inter-process communication protocol<br>standardization.</p><blockquote><p>随着战略和战术计算机通信网络的发展和部署，提供相互连接的手段和支持广泛应用的标准进程间通信协议至关重要。<br>考虑到需要这样的标准，负责研究和工程的国防部副部长声明了本文描述的传输控制协议(TCP)，这份协议将作为全局性进程间通信协议标准化的基础。</p></blockquote><p>TCP is a connection-oriented, end-to-end reliable protocol designed to<br>fit into a layered hierarchy of protocols which support multi-network<br>applications.  The TCP provides for reliable inter-process<br>communication between pairs of processes in host computers attached to<br>distinct but interconnected computer communication networks.  Very few<br>assumptions are made as to the reliability of the communication<br>protocols below the TCP layer.  TCP assumes it can obtain a simple,<br>potentially unreliable datagram service from the lower level<br>protocols.  In principle, the TCP should be able to operate above a<br>wide spectrum of communication systems ranging from hard-wired<br>connections to packet-switched or circuit-switched networks.</p><blockquote><p>TCP 是一种面向连接的端到端可靠协议，它被设计成适合于支持多网络应用程序的分层协议层次结构。<br>有一些计算机链接到不同的网络，但是这些网络之间是互通的。TCP 给这些计算机提供了可靠的内部进程通信。<br>TCP 下层通信的可靠性是未知的，TCP 假定它可以提供一个简单的，可能不可靠的数据报文服务。<br>原则上，TCP应该能够在从硬线连接到分组交换或电路交换网络的广泛通信系统频谱之上运行。（大概的意思就是 TCP 应该可以各种硬件之上运行，和运行无关）。</p></blockquote><p>TCP is based on concepts first described by Cerf and Kahn in [1].  The<br>TCP fits into a layered protocol architecture just above a basic<br>Internet Protocol [2] which provides a way for the TCP to send and<br>receive variable-length segments of information enclosed in internet<br>datagram “envelopes”.  The internet datagram provides a means for<br>addressing source and destination TCPs in different networks.  The<br>internet protocol also deals with any fragmentation or reassembly of<br>the TCP segments required to achieve transport and delivery through<br>multiple networks and interconnecting gateways.  The internet protocol<br>also carries information on the precedence, security classification<br>and compartmentation of the TCP segments, so this information can be<br>communicated end-to-end across multiple networks.</p><blockquote><p>TCP 是基于 Cerf 和 Kahn 在 [1] 中第一次描述的概念。<br>TCP 协议是适合分层控制协议的架构的，就在基础的 IP 协议之上（IP 协议为 TCP 提供了一种发送和接收不定长数据的方式。）<br>internet数据报提供了一种在不同网络中寻址源 tcp 和目标 tcp 的方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;PREFACE（引言）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;INTRODUCTION （简介）&lt;/p&gt;
&lt;p&gt;1.1  Motivation （动机）&lt;br&gt;1.2  Scope （范围）&lt;br&gt;1.3  About This Document （关于此
      
    
    </summary>
    
      <category term="翻译" scheme="https://rovast.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="RFC" scheme="https://rovast.github.io/tags/RFC/"/>
    
  </entry>
  
  <entry>
    <title>php-class</title>
    <link href="https://rovast.github.io/2019/05/03/php-class/"/>
    <id>https://rovast.github.io/2019/05/03/php-class/</id>
    <published>2019-05-03T08:28:51.000Z</published>
    <updated>2020-11-28T08:49:18.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-面向对象的类型"><a href="#PHP-面向对象的类型" class="headerlink" title="PHP 面向对象的类型"></a>PHP 面向对象的类型</h2><ul><li><p>普通类   class</p></li><li><p>抽象类   abstract class</p><blockquote><ol><li>抽象类不能被实例化</li><li>抽象方法不能有具体实现</li></ol></blockquote></li><li><p>接口     interface</p><blockquote><ol><li>普通类继承接口，必须实现接口所有方法</li><li>接口类中定义的方法都是共有。同时，实现方也都是共有</li></ol></blockquote></li><li><p>特性     trait</p><blockquote><ol><li>如果有冲突，通过 instead of 定义优先级，或者使用 as 定义别名</li><li>也可以使用 as 修改访问级别</li></ol></blockquote></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">TraitA</span> &#123;</span><br><span class="line">        <span class="title">function1</span> <span class="title">as</span> <span class="title">private</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">use</span> <span class="title">TraitB</span> &#123;</span><br><span class="line">        <span class="title">TraitB</span>-&gt;<span class="title">function1</span> <span class="title">as</span> <span class="title">functionB</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>final类  final</li></ul><blockquote><p>使用 final 修饰类或者方法，则类不能再被继承，方法不能再被覆盖</p></blockquote><ul><li>匿名类   new class{}</li></ul><blockquote><p>快速创建匿名类，不能有类名</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP-面向对象的类型&quot;&gt;&lt;a href=&quot;#PHP-面向对象的类型&quot; class=&quot;headerlink&quot; title=&quot;PHP 面向对象的类型&quot;&gt;&lt;/a&gt;PHP 面向对象的类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通类   class&lt;/p&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="编程" scheme="https://rovast.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="php" scheme="https://rovast.github.io/tags/php/"/>
    
  </entry>
  
</feed>
