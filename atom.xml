<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rovast</title>
  
  <subtitle>rovast&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rovast.github.io/"/>
  <updated>2021-02-08T09:50:07.143Z</updated>
  <id>https://rovast.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解 shell 脚本中的常见用法2&gt;&amp;1</title>
    <link href="https://rovast.github.io/2021/02/08/understanding-shell-script-idiom-redirect/"/>
    <id>https://rovast.github.io/2021/02/08/understanding-shell-script-idiom-redirect/</id>
    <published>2021-02-08T01:39:02.000Z</published>
    <updated>2021-02-08T09:50:07.143Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.brianstorti.com/understanding-shell-script-idiom-redirect/" target="_blank" rel="noopener">https://www.brianstorti.com/understanding-shell-script-idiom-redirect/</a></p><p>在我们接触的 shell 脚本中，对 <code>2&gt;&amp;1</code> 一定不陌生，比如 <code>ls foo &gt; /dev/null 2&gt;&amp;1</code>。</p><p>本文就来解释下 <code>2&gt;&amp;1</code> 究竟做了什么，并且是如何起作用的。</p><h2 id="一、I-O-重定向简介"><a href="#一、I-O-重定向简介" class="headerlink" title="一、I/O 重定向简介"></a>一、I/O 重定向简介</h2><p>「重定向」是计算机用来把命令的输出从一个地方，输出到另一个地方。举个例子，默认情况下，我们使用 <code>cat</code> 指令可以把一个文件的内容打印到终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat foo.txt</span><br><span class="line">foo</span><br><span class="line">bar</span><br><span class="line">baz</span><br></pre></td></tr></table></figure><p>但是，我们可以把输出重定向到另外地方。此例中，我们可以把输出重定向到 <code>output.txt</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat foo.txt &gt; output.txt</span><br><span class="line"></span><br><span class="line">$ cat output.txt</span><br><span class="line">foo</span><br><span class="line">bar</span><br><span class="line">baz</span><br></pre></td></tr></table></figure><p>注意，在执行第一行命令 <code>cat foo.txt &gt; output.txt</code> 时，我们在屏幕上看不到任何输出。我们把原来应该打印到屏幕的内容，重定向到 <code>output.txt</code> 了，所以屏幕上不会有任何输出了。</p><p>这里，「本来应该打印到屏幕的内容」，就是<strong>标准输出</strong>，即 <strong>stdout(standard output)</strong>。</p><p>除了<strong>标准输出</strong>可以接收程序的输出之外，还有一个地方可以，叫 <strong>标准错误输出</strong>，即 <strong>stderr(standard error)</strong>。stderr 用来接收程序的错误消息。例如，我们 <code>cat</code> 了一个不存在的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat nop.txt &gt; output.txt</span><br><span class="line">cat: nop.txt: No such file or directory</span><br></pre></td></tr></table></figure><p>我们看到，虽然我们要求程序把输出重定向到 <code>output.txt</code>，但是我们还是在屏幕上看到了错误消息输出。这是因为我们只是重定向了 standard output，而不是 standard error。</p><h2 id="二、文件描述符-fd-简介"><a href="#二、文件描述符-fd-简介" class="headerlink" title="二、文件描述符(fd)简介"></a>二、文件描述符(fd)简介</h2><p>文件描述符（file descriptor）简单来说，就是一个正整数，用来代表一个打开的文件。比如当前我们有 100 各打开的文件，那么就有 100 个文件描述符。</p><p>唯一需要补充的是，在 Unix 系统中，「一切皆文件」。</p><p>同时我们还应该知道，对于标准输出(stdout)和标准错误输出(stderr)，也有对应的文件描述符。我们使用 1 和 2 来分别表示 stdout 和 stderr 所在的位置。</p><h2 id="三、融合上述知识"><a href="#三、融合上述知识" class="headerlink" title="三、融合上述知识"></a>三、融合上述知识</h2><p>回到我们的第一个示例，我们还可以有另外一种写法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">$ cat foo.txt &gt; output.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价写法二</span></span><br><span class="line">$ cat foo.txt 1&gt; output.txt</span><br></pre></td></tr></table></figure><p>这里的 1 就是用来代表 stdout 的文件描述符。语法是 <code>[FILE_DESCRIPTOR]&gt;</code>。我们看到把 1 省略的写法 <code>&gt;</code>只是 <code>1&gt;</code> 的快捷写法而已。</p><p>对于重定向到 stderr 的场景，我们只需要在右边的文件前面加上文件描述符即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat nop.txt 2&gt; error.txt</span><br><span class="line"></span><br><span class="line">$ cat error.txt</span><br><span class="line">cat: nop.txt: No such file or directory</span><br></pre></td></tr></table></figure><p>你看，这样就生效了。这会儿，你大概知道 <code>2&gt;&amp;1</code> 是怎样工作的，让我们来总结总结。</p><p>我们使用 <code>&amp;1</code> 来表示文件描述符1(stdout)的地址。当你使用 <code>2&gt;&amp;1</code> 时，其实就是在说：把 stderr 的输出重定向到 stdout 的地方。这样，我们就可以把程序的标准输出和错误输出都输出到同一个地方了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat foo.txt &gt; output.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">$ cat output.txt</span><br><span class="line">foo</span><br><span class="line">bar</span><br><span class="line">baz</span><br><span class="line"></span><br><span class="line">$ cat nop.txt &gt; output.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">$ cat output.txt</span><br><span class="line">cat: nop.txt: No such file or directory</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>程序可以把输出发送到两个地方：标准输出(stdout，standard output)和标准错误输出(stderr，standard error)。</li><li>你可以把输出重定向到另一个地方（比如文件）</li><li>文件描述符1和2 可以分别用来表示 stdout 和 stderr</li><li><code>command &gt; output</code> 是 <code>command 1&gt; output</code> 的缩写</li><li>可以使用 <code>&amp;[FILE_DESCRIPTOR]</code> 来引用文件描述符的值（或者叫指向文件描述符的地址）</li><li>使用 <code>2&gt;&amp;1</code> 来重定向 stderr 的输出至 stdout 的地方（你可以用 <code>1&gt;&amp;2</code> 来进行反向操作）</li></ul><p>另，在 Linux 系统中 0、1、2 分别表示不同的设备类型，其中</p><p>0 标准输入设备，指键盘<br>1 标准正确输出设备<br>2 标准错误输出设备</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;https://www.brianstorti.com/understanding-shell-script-idiom-redirect/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.brianstort
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MacOS非安全模式打开Chrome</title>
    <link href="https://rovast.github.io/2021/02/01/cors-on-mac/"/>
    <id>https://rovast.github.io/2021/02/01/cors-on-mac/</id>
    <published>2021-02-01T00:02:18.000Z</published>
    <updated>2021-02-01T08:04:07.298Z</updated>
    
    <content type="html"><![CDATA[<p>使用允许跨域（不安全）模式打开，便于调试，设定一个 Alias 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> openChromeNoCORS=<span class="string">"open -na Google\ Chrome --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security --disable-site-isolation-trials"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用允许跨域（不安全）模式打开，便于调试，设定一个 Alias 即可&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Antv G2 修改 Brush 默认行为为返回时间戳范围</title>
    <link href="https://rovast.github.io/2021/01/29/ant-g2-brush-timerange/"/>
    <id>https://rovast.github.io/2021/01/29/ant-g2-brush-timerange/</id>
    <published>2021-01-29T01:12:46.000Z</published>
    <updated>2021-01-29T09:20:39.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="G2-brush-时间轴，而不是筛选数据点"><a href="#G2-brush-时间轴，而不是筛选数据点" class="headerlink" title="G2 brush 时间轴，而不是筛选数据点"></a>G2 brush 时间轴，而不是筛选数据点</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>目前 G2 使用 brush-x 筛选后的是对应的点，而不是 X 轴的时间范围。在实际使用过程中，我们需要场景如下</p><ol><li>鼠标筛选一个区域</li><li>获取这个区域的开始时间和结束时间</li><li>以第2步获取到的时间范围作为结果来重新获取数据</li></ol><h2 id="二、核心代码一览"><a href="#二、核心代码一览" class="headerlink" title="二、核心代码一览"></a>二、核心代码一览</h2><h3 id="2-1-注册-Action"><a href="#2-1-注册-Action" class="headerlink" title="2.1 注册 Action"></a>2.1 注册 Action</h3><ul><li><code>src/index.ts</code>，中枚举出了可以使用的 Action</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">registerAction(<span class="string">'brush'</span>, DataRangeFilter);</span><br><span class="line">registerAction(<span class="string">'brush-x'</span>, DataRangeFilter, &#123; dims: [<span class="string">'x'</span>] &#125;);</span><br><span class="line">registerAction(<span class="string">'brush-y'</span>, DataRangeFilter, &#123; dims: [<span class="string">'y'</span>] &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-filter-处理逻辑"><a href="#2-2-filter-处理逻辑" class="headerlink" title="2.2 filter 处理逻辑"></a>2.2 filter 处理逻辑</h3><ul><li>看下 filter 流程<code>src/interaction/action/data/range-filter.ts</code><ul><li>获取到用户当前选择的视觉点</li><li>转换视觉点，获取到实际选择的 min value 和 max value，并且生成 filter</li><li>根据 filter 进行数据筛选</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> filter() &#123;</span><br><span class="line">  <span class="keyword">let</span> startPoint;</span><br><span class="line">  <span class="keyword">let</span> currentPoint;</span><br><span class="line">  <span class="comment">// ... codes</span></span><br><span class="line">  <span class="comment">// 进行一些列处理，得到 startPoint 和 currentPoint 的值</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> view = <span class="keyword">this</span>.context.view;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取到归一化坐标</span></span><br><span class="line">  <span class="keyword">const</span> coord = view.getCoordinate();</span><br><span class="line">  <span class="keyword">const</span> normalCurrent = coord.invert(currentPoint);</span><br><span class="line">  <span class="keyword">const</span> normalStart = coord.invert(startPoint);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置 x 方向的 filter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.hasDim(<span class="string">'x'</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> xScale = view.getXScale();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// filter 其实就是一个函数  (value: any, datum: Datum, idx?: number) =&gt; boolean;</span></span><br><span class="line">    <span class="keyword">const</span> filter = getFilter(xScale, <span class="string">'x'</span>, normalCurrent, normalStart);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心！根据 filter 进行筛选</span></span><br><span class="line">    <span class="keyword">this</span>.filterView(view, xScale.field, filter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置 y 方向的 filter</span></span><br><span class="line">  <span class="comment">// ... codes</span></span><br><span class="line">  <span class="keyword">this</span>.reRender(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看下如何获取到 min value 和 max value <code>src/interaction/action/data/range-filter.ts</code><ul><li>获取到的 minValue 和 maxValue 取整后就是时间戳了</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFilter</span>(<span class="params">scale: Scale, dim: <span class="built_in">string</span>, point1: Point, point2: Point</span>): <span class="title">FilterCondition</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> min = <span class="built_in">Math</span>.min(point1[dim], point2[dim]);</span><br><span class="line">  <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(point1[dim], point2[dim]);</span><br><span class="line">  <span class="keyword">const</span> [rangeMin, rangeMax] = scale.range;</span><br><span class="line">  <span class="comment">// 约束值在 scale 的 range 之间</span></span><br><span class="line">  <span class="keyword">if</span> (min &lt; rangeMin) &#123;</span><br><span class="line">    min = rangeMin;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (max &gt; rangeMax) &#123;</span><br><span class="line">    max = rangeMax;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 范围大于整个 view 的范围，则返回 null</span></span><br><span class="line">  <span class="keyword">if</span> (min === rangeMax &amp;&amp; max === rangeMax) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> minValue = scale.invert(min);</span><br><span class="line">  <span class="keyword">const</span> maxValue = scale.invert(max);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 这里获取到的 minValue 和 maxValue，就是对应的 x 轴选择的时间范围</span></span><br><span class="line"><span class="comment">   * 类似 minValue 1611724258188.5186 Wed Jan 27 2021 13:10:58 GMT+0800</span></span><br><span class="line"><span class="comment">   *  maxValue 1611724586405.7407 Wed Jan 27 2021 13:16:26 GMT+0800</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (scale.isCategory) &#123;</span><br><span class="line">    <span class="keyword">const</span> minIndex = scale.values.indexOf(minValue);</span><br><span class="line">    <span class="keyword">const</span> maxIndex = scale.values.indexOf(maxValue);</span><br><span class="line">    <span class="keyword">const</span> arr = scale.values.slice(minIndex, maxIndex + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> arr.includes(value);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value &gt;= minValue &amp;&amp; value &lt;= maxValue;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在用户定义的 action 上下文里拿到对应的 rangefilter 实例</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.actions.find(<span class="function"><span class="params">v</span> =&gt;</span> v.name === <span class="string">'brush-x'</span>)</span><br></pre></td></tr></table></figure><p>但同时我们也看到，我们需要的 minValue 和 maxValue 都是作为临时计算的产物，并没有挂在对象实例上，所以我们有以下三条路</p><ol><li>获取到 ctx 后，自己重新计算</li><li>修改源码，把这个临时状态挂在对象上。不过需要重新发包，或者把代码纳入版本库？侵入性强，不便于后期升级，还是算了吧</li><li>再去看看其他方案吧</li></ol><p>不需要在选择上浪费太多时间，干就完了。我们先选择方案一，要是后面有更好的，再更换嘛。</p><h3 id="2-3-根据获取到的-ctx-来计算-Min-和-Max"><a href="#2-3-根据获取到的-ctx-来计算-Min-和-Max" class="headerlink" title="2.3 根据获取到的 ctx 来计算 Min 和 Max"></a>2.3 根据获取到的 ctx 来计算 Min 和 Max</h3><p><img src="/assets/image-20210127174119210.png" alt="image-20210127174119210"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、获取到可视区域 view 的宽度</span></span><br><span class="line"><span class="comment"> * 2、获取到可视区域的时间戳分布</span></span><br><span class="line"><span class="comment"> * 3、算出 brush 的起始点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param ctx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getBrushedTimeRange</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// action 本身实例</span></span><br><span class="line">  <span class="keyword">const</span> self = ctx.actions.find(<span class="function"><span class="params">v</span> =&gt;</span> v.name === <span class="string">'brush-x'</span>)</span><br><span class="line">  <span class="keyword">const</span> view = self.context.view</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取到两个选择的点</span></span><br><span class="line">  <span class="keyword">const</span> startPoint = self.startPoint</span><br><span class="line">  <span class="keyword">const</span> currentPoint = ctx.getCurrentPoint()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画布两侧的 padding</span></span><br><span class="line">  <span class="keyword">const</span> paddingLeft = view.padding[<span class="number">3</span>]</span><br><span class="line">  <span class="comment">// 获取主体的实际宽度</span></span><br><span class="line">  <span class="keyword">const</span> totalWith = view.width - view.padding[<span class="number">1</span>] - view.padding[<span class="number">3</span>]</span><br><span class="line">  <span class="comment">// 获取选择点的开始结束坐标</span></span><br><span class="line">  <span class="keyword">const</span> startX = startPoint.x - paddingLeft</span><br><span class="line">  <span class="keyword">const</span> endX = currentPoint.x - paddingLeft</span><br><span class="line"></span><br><span class="line">  <span class="comment">// range 范围的才会落点</span></span><br><span class="line">  <span class="keyword">const</span> timestampsCount = (view.getXScale().max - view.getXScale().min) / (view.getXScale().range[<span class="number">1</span>] - view.getXScale().range[<span class="number">0</span>])</span><br><span class="line">  <span class="comment">// 获取到每一个时间占用的宽度</span></span><br><span class="line">  <span class="keyword">const</span> perTimestampWidth = timestampsCount / totalWith</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始需要补偿的时间范围</span></span><br><span class="line">  <span class="keyword">const</span> startXTimestamp = view.getXScale().min - view.getXScale().range[<span class="number">0</span>] * totalWith * perTimestampWidth</span><br><span class="line">  <span class="keyword">const</span> startTime = startXTimestamp + startX * perTimestampWidth</span><br><span class="line">  <span class="keyword">const</span> endTime = startXTimestamp + endX * perTimestampWidth</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> startTime &lt; endTime ? [startTime, endTime] : [endTime, startTime]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在brush回调的地方，执行下面的动作即可，着重关注 <code>callback</code> 地方</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">registerInteraction(<span class="string">'brushX'</span>, &#123;</span><br><span class="line">  showEnable: [</span><br><span class="line">    &#123; trigger: <span class="string">'plot:mouseenter'</span>, action: <span class="string">'cursor:crosshair'</span> &#125;,</span><br><span class="line">    &#123; trigger: <span class="string">'plot:mouseleave'</span>, action: <span class="string">'cursor:default'</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  start: [</span><br><span class="line">    &#123;</span><br><span class="line">      trigger: <span class="string">'mousedown'</span>,</span><br><span class="line">      action: [<span class="string">'brush-x:start'</span>, <span class="string">'x-rect-mask:start'</span>, <span class="string">'x-rect-mask:show'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  processing: [</span><br><span class="line">    &#123;</span><br><span class="line">      trigger: <span class="string">'mousemove'</span>,</span><br><span class="line">      action: [<span class="string">'x-rect-mask:resize'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  end: [</span><br><span class="line">    &#123;</span><br><span class="line">      trigger: <span class="string">'mouseup'</span>,</span><br><span class="line">      action: [<span class="string">'brush-x:end'</span>, <span class="string">'x-rect-mask:end'</span>, <span class="string">'x-rect-mask:hide'</span>],</span><br><span class="line">      callback: <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 重点再这里</span></span><br><span class="line">        <span class="keyword">const</span> [startTime, endTime] = getBrushedTimeRange(ctx)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'on-brushed'</span>, [startTime, endTime])</span><br><span class="line">        <span class="keyword">this</span>.resetBrushAction = ctx.actions.find(<span class="function"><span class="params">v</span> =&gt;</span> v.name === <span class="string">'brush-x'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  rollback: [</span><br><span class="line">    &#123; trigger: <span class="string">'dblclick'</span>, action: [<span class="string">'brush-x:reset'</span>, <span class="string">'reset-button:hide'</span>] &#125;,</span><br><span class="line">    &#123; trigger: <span class="string">'reset-button:click'</span>, action: [<span class="string">'brush-x:reset'</span>, <span class="string">'reset-button:hide'</span>] &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="三、踩坑方案"><a href="#三、踩坑方案" class="headerlink" title="三、踩坑方案"></a>三、踩坑方案</h2><h3 id="3-1-直接使用-brush-filter-导致的-scalex-上下文传递不一致问题"><a href="#3-1-直接使用-brush-filter-导致的-scalex-上下文传递不一致问题" class="headerlink" title="3.1 直接使用 brush-filter 导致的 scalex 上下文传递不一致问题"></a>3.1 直接使用 brush-filter 导致的 scalex 上下文传递不一致问题</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hack 原来的 getFilter() 方法，直接返回我们需要的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param scale Scale</span></span><br><span class="line"><span class="comment"> * @param dim</span></span><br><span class="line"><span class="comment"> * @param point1 Point</span></span><br><span class="line"><span class="comment"> * @param point2</span></span><br><span class="line"><span class="comment"> * @returns &#123;null|&#123;minValue, maxValue&#125;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hackGetFilterReturnMinMax</span>(<span class="params">scale, dim, point1, point2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> min = <span class="built_in">Math</span>.min(point1[dim], point2[dim])</span><br><span class="line">  <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(point1[dim], point2[dim])</span><br><span class="line">  <span class="keyword">const</span> [rangeMin, rangeMax] = scale.range</span><br><span class="line">  <span class="comment">// 约束值在 scale 的 range 之间</span></span><br><span class="line">  <span class="keyword">if</span> (min &lt; rangeMin) &#123;</span><br><span class="line">    min = rangeMin</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (max &gt; rangeMax) &#123;</span><br><span class="line">    max = rangeMax</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 范围大于整个 view 的范围，则返回 null</span></span><br><span class="line">  <span class="keyword">if</span> (min === rangeMax &amp;&amp; max === rangeMax) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> minValue = scale.invert(min)</span><br><span class="line">  <span class="keyword">const</span> maxValue = scale.invert(max)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log('start', minValue, 'end', maxValue)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; minValue, maxValue &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-区分-view-的几个视角"><a href="#3-2-区分-view-的几个视角" class="headerlink" title="3.2 区分 view 的几个视角"></a>3.2 区分 view 的几个视角</h3><p><img src="/assets/image-20210127174110482.png" alt="image-20210127174110482"></p><h2 id="四、一些链接"><a href="#四、一些链接" class="headerlink" title="四、一些链接"></a>四、一些链接</h2><h3 id="4-1-tooltip-联动"><a href="#4-1-tooltip-联动" class="headerlink" title="4.1 tooltip 联动"></a>4.1 tooltip 联动</h3><p><a href="https://antv-g2.gitee.io/zh/examples/interaction/others#views-tooltip" target="_blank" rel="noopener">https://antv-g2.gitee.io/zh/examples/interaction/others#views-tooltip</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;G2-brush-时间轴，而不是筛选数据点&quot;&gt;&lt;a href=&quot;#G2-brush-时间轴，而不是筛选数据点&quot; class=&quot;headerlink&quot; title=&quot;G2 brush 时间轴，而不是筛选数据点&quot;&gt;&lt;/a&gt;G2 brush 时间轴，而不是筛选数据点&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SkyWalking PHP 内核代码剖析</title>
    <link href="https://rovast.github.io/2021/01/29/skywalking-php-kernel-flow/"/>
    <id>https://rovast.github.io/2021/01/29/skywalking-php-kernel-flow/</id>
    <published>2021-01-29T01:04:15.000Z</published>
    <updated>2021-01-29T09:11:23.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、总体流程"><a href="#一、总体流程" class="headerlink" title="一、总体流程"></a>一、总体流程</h2><p>PHP 重要几个生命周期说明，先后顺序为 PHP_MI、PHP_RI、PHP_EXECUTE、PHP_RS、PHP_MS，每个模块的作用如下</p><ul><li>PHP_MI，模块初始化阶段，主要进行 PHP 框架、Zend 引擎的初始化工作。重要的几个工作如下：<ul><li>全局状态信息的初始化，如 SG、CG、EG等</li><li>启动 Zend 引擎，内存池启动、注册虚拟机的各项执行句柄</li><li>解析 php.ini 配置文件</li><li>注册拓展，包括静态编译拓展和动态编译拓展</li><li><strong>回调拓展定义的 MI 函数，即 <code>PHP_MINIT_FUNCTION</code> </strong></li></ul></li><li>PHP_RI，请求初始化阶段，CLI 模式下，该函数执行一次。如果是 php-fpm 模式下，会在 PHP_RI 和 PHP_RS 之间循环。该阶段需要关注的有如下事宜：<ul><li>激活 zend 引擎，包括：重置垃圾回收器、初始化编译器、初始化执行器、初始化词法扫描器</li><li><strong>回调各拓展定义的 RI 函数，即 <code>PHP_RINIT_FUNCTION</code></strong></li></ul></li><li>PHP_EXECUTE，脚本执行阶段。通过拦截 zend 引擎的 execute 函数，我们可以捕获用户执行的每一条语句，我们可以在此阶段，进行 MySQL、Redis、CURL等代码的捕获，从而生成对应的 span，进而构建 trace。</li><li>PHP_RS，请求关闭阶段。该阶段主要进行请求资源的释放动作，同时这个是 fpm 请求的最后一个阶段，我们可以在此阶段，把本次请求获取的 segment 信息上报至 sidecar</li><li>PHP_MS，模块关闭阶段。各项资源的释放</li></ul><p>SkyWalking PHP 内核的主要处理流程整理如下：</p><p><img src="/assets/image-20210118185219149.png" alt="image-20210118185219149"></p><h2 id="二、PHP-MI-阶段，自定义函数执行器替换Zend内核执行器"><a href="#二、PHP-MI-阶段，自定义函数执行器替换Zend内核执行器" class="headerlink" title="二、PHP_MI 阶段，自定义函数执行器替换Zend内核执行器"></a>二、PHP_MI 阶段，自定义函数执行器替换Zend内核执行器</h2><p><img src="/assets/image-20210118191216694.png" alt="image-20210118191216694"></p><p>该阶段的入口函数 <strong><code>PHP_MINIT_FUNCTION (skywalking)</code></strong></p><h3 id="2-1-代码命名约定"><a href="#2-1-代码命名约定" class="headerlink" title="2.1 代码命名约定"></a>2.1 代码命名约定</h3><p>该阶段主要是进行 Zend 执行器的 assign 动作，变量的命名有如下规则：</p><ul><li><code>ori_</code> 打头的，是 Zend 引擎的原函数，这里做备份，便于 hack 后，恢复原来的执行</li><li><code>zend_</code> 打头的，就是 Zend 引擎的内置函数</li><li><code>sky_</code> 打头的，是我们计划在对应阶段进行的自定义动作。一般在自定义动作的最后，都会使用 <code>ori_</code> 来交还函数控制权，恢复原来正常流程函数的执行动作</li></ul><p>部分代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PHP_MINIT_FUNCTION (skywalking) &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 用户自定义函数执行器(php脚本定义的类、函数)</span></span><br><span class="line">  ori_execute_ex = zend_execute_ex;</span><br><span class="line">  zend_execute_ex = sky_execute_ex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部函数执行器(c语言定义的类、函数)</span></span><br><span class="line">  ori_execute_internal = zend_execute_internal;</span><br><span class="line">  zend_execute_internal = sky_execute_internal;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-拦截的函数分类和意义"><a href="#2-2-拦截的函数分类和意义" class="headerlink" title="2.2 拦截的函数分类和意义"></a>2.2 拦截的函数分类和意义</h3><p>其拦截的函数主要分三类：</p><ul><li>zend_execute_ex，拦截用户态函数，即我们平时写的 .php 文件里面的代码。这里可以捕获到 class name 类名、function name 函数名</li><li>zend_execute_internal，拦截 PHP 内置的函数和类等，比如 PDO、mysqli 等</li><li>CURL相关的函数句柄，这样我们就可以捕获函数的上下游 http 调用信息。其拦截的函数包括：curl_exec、curl_setopt、curl_setopt_array、curl_close</li></ul><h2 id="三、PHP-RI-阶段，请求初始化，注册-sky-agent，构造原始-segment"><a href="#三、PHP-RI-阶段，请求初始化，注册-sky-agent，构造原始-segment" class="headerlink" title="三、PHP_RI 阶段，请求初始化，注册 sky-agent，构造原始 segment"></a>三、PHP_RI 阶段，请求初始化，注册 sky-agent，构造原始 segment</h2><p>入口函数 <code>PHP_RINIT_FUNCTION(skywalking)</code></p><h3 id="3-1-主要流程"><a href="#3-1-主要流程" class="headerlink" title="3.1 主要流程"></a>3.1 主要流程</h3><p>PHP_RI 阶段在每一个 fpm 请求时都会触发一次，在此阶段，主要进行以下两件事</p><ul><li><code>static int sky_register()</code>，通过 unix sock 通信，注册 agent，同时根据返回的握手信息来确定 app、service、instance信息</li><li><code>static void request_init()</code> ，构造 segement 信息，这里包含了以下重要信息<ul><li>生成 traceId</li><li>根据 header 的 sw8 字段来解析上游信息，进而构造 span 信心，refs 信息</li></ul></li></ul><h3 id="3-2-traceId-生成规则，三段格式-instance-pid-second"><a href="#3-2-traceId-生成规则，三段格式-instance-pid-second" class="headerlink" title="3.2 traceId 生成规则，三段格式 instance.pid.second"></a>3.2 traceId 生成规则，三段格式 instance.pid.second</h3><p>其核心代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generate_context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sys_pid = getpid();</span><br><span class="line">  <span class="keyword">long</span> second = get_second();</span><br><span class="line">  second = second * <span class="number">10000</span> + sky_increment_id; <span class="comment">//创建traceid的因子</span></span><br><span class="line">  <span class="keyword">char</span> *makeTraceId;</span><br><span class="line">  makeTraceId = (<span class="keyword">char</span> *) emalloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">180</span>); <span class="comment">//分配traceId所需要的内存</span></span><br><span class="line"></span><br><span class="line">  bzero(makeTraceId, <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(makeTraceId, <span class="string">"%d.%d.%ld"</span>, application_instance, sys_pid, second);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 sky_increment_id 是 0~9999。MSP 平台中显示的 TraceId 信息，类似如下：</p><p><img src="/assets/image-20210118194441556.png" alt="image-20210118194441556"></p><p>我们来简短分析下，按点「.」分割</p><ul><li><code>1</code>。因为在 sky_register 阶段，application_instance 固定为 1</li><li><code>393</code>，即 pid</li><li><code>16109522148050</code> 这个就是时间戳 + sky_increment_id 构成的了</li></ul><h3 id="3-3-header-里的-HTTP-SW8-数据含义"><a href="#3-3-header-里的-HTTP-SW8-数据含义" class="headerlink" title="3.3 header 里的 HTTP_SW8 数据含义"></a>3.3 header 里的 HTTP_SW8 数据含义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generate_context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// .......</span></span><br><span class="line">  <span class="comment">// 获取 header HTTP_SW8 信息</span></span><br><span class="line">  sw = zend_hash_str_find(Z_ARRVAL_P(carrier), <span class="string">"HTTP_SW8"</span>, <span class="keyword">sizeof</span>(<span class="string">"HTTP_SW8"</span>) - <span class="number">1</span>); <span class="comment">//$SERVER['HTTP_SW8'];</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .......</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 按中横线（-）分割为 sw8_N 数组</span></span><br><span class="line">  php_explode(zend_string_init(ZEND_STRL(<span class="string">"-"</span>), <span class="number">0</span>), Z_STR_P(sw), &amp;temp, <span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  <span class="comment">// 对分割后的数组，进行解码，其 index 为 1,2,4,5,6,7</span></span><br><span class="line">  zval_b64_decode(&amp;sw8_1decode, Z_STRVAL_P(sw8_1));</span><br><span class="line">  zval_b64_decode(&amp;sw8_2decode, Z_STRVAL_P(sw8_2));</span><br><span class="line">  zval_b64_decode(&amp;sw8_4decode, Z_STRVAL_P(sw8_4));</span><br><span class="line">  zval_b64_decode(&amp;sw8_5decode, Z_STRVAL_P(sw8_5));</span><br><span class="line">  zval_b64_decode(&amp;sw8_6decode, Z_STRVAL_P(sw8_6));</span><br><span class="line">  zval_b64_decode(&amp;sw8_7decode, Z_STRVAL_P(sw8_7));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去网关日志里，取一个样本分析，得到的原始 header 信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1-QzBBODNDMzEtMTYxMDk1MzUyODM0MC0xMTc3OTctQS0xMjcw-QzBBODNDMzEtMTYxMDk1MzUyODM0MC0xMTc3OTctQS0xMjcw-1-xxxxxxxxxxxx-YjcyOWU0MzUtNjA5Zi00YzMwLWI4MjctNjZmMmUyYWZjNmM2-xxxxxxxxxx==-xxxxx.service</span><br></pre></td></tr></table></figure><p>我们按中横线(-)分割，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">QzBBODNDMzEtMTYxMDk1MzUyODM0MC0xMTc3OTctQS0xMjcw // Trace Id base64</span><br><span class="line">QzBBODNDMzEtMTYxMDk1MzUyODM0MC0xMTc3OTctQS0xMjcw // Parent trace segment Id</span><br><span class="line">1                                                // Parent span Id</span><br><span class="line">xxxxxxxxxxxx                                     // Parent service</span><br><span class="line">YjcyOWU0MzUtNjA5Zi00YzMwLWI4MjctNjZmMmUyYWZjNmM2 // Parent service instance</span><br><span class="line">xxxxxxxxxx==                                     // Parent endpoint</span><br><span class="line">xxxxx.service                                    // Target address used at client side of this request</span><br></pre></td></tr></table></figure><p>我们对其中 1,2,4,5,6,7 进行 base64 解码，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">C0A83C31-1610953528340-117797-A-1270 // Trace Id base64</span><br><span class="line">C0A83C31-1610953528340-117797-A-1270 // Parent trace segment Id</span><br><span class="line">1                                    // Parent span Id</span><br><span class="line">xxxxxxxxxxxxx                        // Parent service</span><br><span class="line">b729e435-609f-4c30-b827-66f2e2afc6c6 // Parent service instance</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxx            // Parent endpoint</span><br><span class="line">xxxxxxxxxx.service                   // Target address used at client side of this request</span><br></pre></td></tr></table></figure><h3 id="3-4-RI-周期主要流程如下"><a href="#3-4-RI-周期主要流程如下" class="headerlink" title="3.4 RI 周期主要流程如下"></a>3.4 RI 周期主要流程如下</h3><p><img src="/assets/lifecycle.png" alt="lifecycle"></p><h2 id="四、PHP-EXECUTE-阶段，拦截代码执行语句，分析后恢复执行"><a href="#四、PHP-EXECUTE-阶段，拦截代码执行语句，分析后恢复执行" class="headerlink" title="四、PHP_EXECUTE 阶段，拦截代码执行语句，分析后恢复执行"></a>四、PHP_EXECUTE 阶段，拦截代码执行语句，分析后恢复执行</h2><p><img src="/assets/image-20210118193135548.png" alt="image-20210118193135548"></p><p>在 MI 阶段，我们替换了 zend 引擎的函数执行指向，所以所有语句的执行会被我们接管。我们在执行完自己需要的动作后，还原原来的执行即可。</p><p>需要注意的是，我们接管的函数会被多次触发，每执行一条 opline，就会被触发一次(存疑，待指正)。</p><h3 id="4-1-ZEND-API-void-sky-execute-ex-zend-execute-data-execute-data"><a href="#4-1-ZEND-API-void-sky-execute-ex-zend-execute-data-execute-data" class="headerlink" title="4.1 ZEND_API void sky_execute_ex(zend_execute_data *execute_data)"></a>4.1 ZEND_API void sky_execute_ex(zend_execute_data *execute_data)</h3><p>核心的流程如下</p><ol><li>获取当前代码执行的信息，包括：类名、函数名</li><li>对类名和函数名进行判断，看是否需要拦截。目前拦截的是 Predis SDK</li><li>如果需要拦截，根据拦截信息构造 span</li><li>把构造好的 span 插入到当前 segment 的 spans 数组里</li><li>恢复函数原来的执行，调用 <code>ori_</code> 即可</li></ol><p><img src="/assets/image-20210118200055531.png" alt="image-20210118200055531"></p><h3 id="4-2-ZEND-API-void-sky-execute-internal-zend-execute-data-execute-data-zval-return-value"><a href="#4-2-ZEND-API-void-sky-execute-internal-zend-execute-data-execute-data-zval-return-value" class="headerlink" title="4.2 ZEND_API void sky_execute_internal(zend_execute_data execute_data, zval return_value)"></a>4.2 ZEND_API void sky_execute_internal(zend_execute_data <em>execute_data, zval </em>return_value)</h3><p>其核心流程和上面 4.1 分析的类似，其不同就在于这里拦截的是 PHP 内置的一些类，即编译时就安装的类。流程主要包括</p><ol><li>获取类名和函数名</li><li>根据类名判断是否需要拦截，目前需要拦截：PDO、PDOStatement、mysqli、Yar_Client、Reids、Memecached</li><li>构造 span，插入到当前 segment 的 spans 数组里</li><li>恢复函数执行</li></ol><p><img src="/assets/image-20210118200231152.png" alt="image-20210118200231152"></p><h3 id="4-3-CURL-HOOK"><a href="#4-3-CURL-HOOK" class="headerlink" title="4.3 CURL HOOK"></a>4.3 CURL HOOK</h3><p>这里主要是调用链的传递，如果发现有 curl 请求，则根据规则生成当前的 sw8 信息，塞到 http header 的 sw8 字段里，传递给下游。</p><p>更多的流程，以后补充。</p><p><img src="/assets/image-20210118200521291.png" alt="image-20210118200521291"></p><h2 id="五、PHP-RS-请求结束阶段，发送-segment-信息至-sidecar"><a href="#五、PHP-RS-请求结束阶段，发送-segment-信息至-sidecar" class="headerlink" title="五、PHP_RS 请求结束阶段，发送 segment 信息至 sidecar"></a>五、PHP_RS 请求结束阶段，发送 segment 信息至 sidecar</h2><p>PHP_RS 阶段主要做两件事儿：</p><ol><li><p>通过 unix sock 发送本请求构建的 segment 信息至 sidecar</p></li><li><p>释放当前请求里的全局状态存储。由于其他的 int、char、boolean 类型的不涉及到内存管理，所以就是四个 zval 的释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ZEND_BEGIN_MODULE_GLOBALS(skywalking)</span><br><span class="line">    <span class="keyword">char</span> *sock_path;</span><br><span class="line">    <span class="keyword">char</span> *app_code; <span class="comment">//app_name eg:skywalking.app_code = MyProjectName</span></span><br><span class="line">    <span class="keyword">char</span> *app_code_env_key; <span class="comment">//app_name 环境变量地址：环境变量-&gt;默认KEY：APM_APP_CODE</span></span><br><span class="line">    zend_bool enable;</span><br><span class="line">    zval UpstreamSegment; <span class="comment">//全局上报数据段</span></span><br><span class="line">    zval context;</span><br><span class="line">    zval curl_header; <span class="comment">//curl header数据</span></span><br><span class="line">    zval curl_header_send; <span class="comment">//记录当前R周期 是否已经send过curl_header</span></span><br><span class="line">    <span class="keyword">int</span>  version;</span><br><span class="line">ZEND_END_MODULE_GLOBALS(skywalking)</span><br></pre></td></tr></table></figure></li></ol><p><img src="/assets/image-20210118200709516.png" alt="image-20210118200709516"></p><h2 id="六、PHP-MS-模块结束阶段"><a href="#六、PHP-MS-模块结束阶段" class="headerlink" title="六、PHP_MS 模块结束阶段"></a>六、PHP_MS 模块结束阶段</h2><p>这个阶段没啥好说的，没啥特殊操作</p><h2 id="七、全景，整个大脑图"><a href="#七、全景，整个大脑图" class="headerlink" title="七、全景，整个大脑图"></a>七、全景，整个大脑图</h2><p><img src="/assets/lifecycle2.png" alt="lifecycle2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、总体流程&quot;&gt;&lt;a href=&quot;#一、总体流程&quot; class=&quot;headerlink&quot; title=&quot;一、总体流程&quot;&gt;&lt;/a&gt;一、总体流程&lt;/h2&gt;&lt;p&gt;PHP 重要几个生命周期说明，先后顺序为 PHP_MI、PHP_RI、PHP_EXECUTE、PHP_RS、
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在 Mac 上使用 Clion 调试 PHP 源码</title>
    <link href="https://rovast.github.io/2020/12/27/debug-php-src-on-mac/"/>
    <id>https://rovast.github.io/2020/12/27/debug-php-src-on-mac/</id>
    <published>2020-12-26T19:39:39.000Z</published>
    <updated>2020-12-27T07:04:34.038Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://www.jianshu.com/p/f6af567b25a7" target="_blank" rel="noopener">https://www.jianshu.com/p/f6af567b25a7</a></p><h2 id="一、编译安装-debug-版本的-PHP"><a href="#一、编译安装-debug-版本的-PHP" class="headerlink" title="一、编译安装 debug 版本的 PHP"></a>一、编译安装 debug 版本的 PHP</h2><ol><li><p>configure php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./configure --<span class="built_in">enable</span>-fpm --<span class="built_in">enable</span>-debug  --with-openssl=/usr/<span class="built_in">local</span>/Cellar/openssl@1.1/1.1.1i/ \</span><br><span class="line">--<span class="built_in">enable</span>-bcmath --with-curl  --<span class="built_in">enable</span>-exif --with-mysqli --with-pdo-mysql \</span><br><span class="line">--<span class="built_in">enable</span>-zip --with-zlib=/usr/<span class="built_in">local</span>/Cellar/zlib/1.2.11/ --<span class="built_in">enable</span>-intl --<span class="built_in">enable</span>-pcntl --<span class="built_in">enable</span>-mbstring --<span class="built_in">enable</span>-soap \</span><br><span class="line">--with-icu-dir=/usr/<span class="built_in">local</span>/Cellar/icu4c/67.1 \</span><br><span class="line">--with-iconv=/usr/<span class="built_in">local</span>/Cellar/libiconv/1.16 \</span><br><span class="line">--with-libxml-dir=/usr/<span class="built_in">local</span>/Cellar/libxml2/2.9.10_2</span><br></pre></td></tr></table></figure></li><li><p>修改 makefile</p></li></ol><p>查找关键字 <code>EXTRA_LIBS =</code> 我的在 line 108，删除所有的 <code>-liconv</code>，末尾加上 <code>/usr/local/opt/libiconv/lib/libiconv.dylib</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">EXTRA_LIBS = -lcrypto -lssl -lcrypto -lz -lresolv -lstdc++ -liconv -liconv -lz -lcrypto -lssl -lcrypto -lm -lxml2 -lz -liconv -lm -lcurl -lxml2 -lz -liconv -lm -licui18n -licuuc -licudata -licuio -lxml2 -lz -liconv -lm -lxml2 -lz -liconv -lm -lxml2 -lz -liconv -lm -lxml2 -lz -liconv -lm -lxml2 -lz -liconv -lm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">EXTRA_LIBS = -lcrypto -lssl -lcrypto -lz -lresolv -lstdc++ -lz -lcrypto -lssl -lcrypto -lm -lxml2 -lz -lm -lcurl -lxml2 -lz -lm -licui18n -licuuc -licudata -licuio -lxml2 -lz -lm -lxml2 -lz -lm -lxml2 -lz -lm -lxml2 -lz -lm -lxml2 -lz -lm /usr/<span class="built_in">local</span>/opt/libiconv/lib/libiconv.dylib</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>make</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>sudo make install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、设定一些目录的权限，不然-Clion-不能正常调试"><a href="#二、设定一些目录的权限，不然-Clion-不能正常调试" class="headerlink" title="二、设定一些目录的权限，不然 Clion 不能正常调试"></a>二、设定一些目录的权限，不然 Clion 不能正常调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R rovast:wheel /usr/<span class="built_in">local</span>/lib/php/</span><br></pre></td></tr></table></figure><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.13)</span><br><span class="line">project(php_7_2_27)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_STANDARD 14)</span><br><span class="line"></span><br><span class="line">set(PHP_SOURCE /Users/rovast/Software/tmp/php-7.2.27)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;PHP_SOURCE&#125;/main)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;PHP_SOURCE&#125;/Zend)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;PHP_SOURCE&#125;/sapi)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;PHP_SOURCE&#125;/pear)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;PHP_SOURCE&#125;/TSRM)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;PHP_SOURCE&#125;)</span><br><span class="line"></span><br><span class="line">add_custom_target(makefile COMMAND make &amp;&amp; make install WORKING_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;)</span><br></pre></td></tr></table></figure><h1 id="debug-on-ubuntu"><a href="#debug-on-ubuntu" class="headerlink" title="debug on ubuntu"></a>debug on ubuntu</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libxml2-dev</span><br><span class="line">./configure --<span class="built_in">enable</span>-debug --<span class="built_in">enable</span>-fpm</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考 &lt;a href=&quot;https://www.jianshu.com/p/f6af567b25a7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/f6af567b25a7&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>grafana iframe 接入备忘录</title>
    <link href="https://rovast.github.io/2020/12/23/grafana-iframe/"/>
    <id>https://rovast.github.io/2020/12/23/grafana-iframe/</id>
    <published>2020-12-22T18:46:30.000Z</published>
    <updated>2020-12-23T03:05:02.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iframe-引入"><a href="#iframe-引入" class="headerlink" title="iframe 引入"></a>iframe 引入</h1><p>部分配置修改后才能进行 iframe 嵌入，默认是不支持的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allow_embedding: <span class="literal">true</span> <span class="comment"># 默认是 false， 为了防止 Clickjacking，如果不设置，浏览器会拒绝显示 iframe</span></span><br><span class="line">cookie_samesite: none <span class="comment"># 如果不设置，无法使用登录功能</span></span><br><span class="line">cookie_secure: <span class="literal">true</span> <span class="comment"># if you're using https and let us know how that works out.</span></span><br></pre></td></tr></table></figure><p>配置说明 <a href="https://grafana.com/docs/grafana/latest/administration/configuration/" target="_blank" rel="noopener">https://grafana.com/docs/grafana/latest/administration/configuration/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cookie_secure</span><br><span class="line">Set to true if you host Grafana behind HTTPS. Default is false.</span><br><span class="line"></span><br><span class="line">cookie_samesite</span><br><span class="line">Sets the SameSite cookie attribute and prevents the browser from sending this cookie along with cross-site requests. </span><br><span class="line">The main goal is to mitigate the risk of cross-origin information leakage. </span><br><span class="line">This setting also provides some protection against cross-site request forgery attacks (CSRF), read more about SameSite here. </span><br><span class="line">Valid values are lax, strict, none, and disabled. Default is lax. </span><br><span class="line">Using value disabled does not add any SameSite attribute to cookies.</span><br><span class="line"></span><br><span class="line">allow_embedding</span><br><span class="line">When false, the HTTP header X-Frame-Options: deny will be set in Grafana HTTP responses which will instruct browsers </span><br><span class="line">to not allow rendering Grafana in a &lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt; or &lt;object&gt;. </span><br><span class="line">The main goal is to mitigate the risk of Clickjacking. Default is false.</span><br></pre></td></tr></table></figure><h1 id="免登陆访问-dashboard"><a href="#免登陆访问-dashboard" class="headerlink" title="免登陆访问 dashboard"></a>免登陆访问 dashboard</h1><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>暂时不支持设定指定的 dashboard 为 public，即：免认证访问。如果开启了只读权限，则所有人皆可以访问</p><h2 id="相关调研"><a href="#相关调研" class="headerlink" title="相关调研"></a>相关调研</h2><p>1、<a href="https://community.grafana.com/t/making-selected-dashboards-public/873" target="_blank" rel="noopener">《Making selected dashboards public》</a></p><blockquote><p>There is no way to do this and there is a big reason why.<br>If you make one dashboard public you will have to make your data source public<br>(ie anyone can query against it).<br>So any possible query for that data source can be issued not just the queries used in the dashboard you made public.</p></blockquote><p>根据初步的调研，得到的答复是不能指定 dashboard 开放 public 权限。同时，官方的 issue 里也有关于此问题的回复</p><p>2、<a href="https://github.com/grafana/grafana/issues/14473" target="_blank" rel="noopener">《[FeatureRequest] Dashboards: Add real time share instead of snapshot》</a></p><p>目前依旧是处于 Open 状态。</p><h2 id="折衷方案"><a href="#折衷方案" class="headerlink" title="折衷方案"></a>折衷方案</h2><p><a href="https://community.grafana.com/t/how-to-make-one-live-dashboard-public/12819" target="_blank" rel="noopener">《How to make one live dashboard public》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iframe-引入&quot;&gt;&lt;a href=&quot;#iframe-引入&quot; class=&quot;headerlink&quot; title=&quot;iframe 引入&quot;&gt;&lt;/a&gt;iframe 引入&lt;/h1&gt;&lt;p&gt;部分配置修改后才能进行 iframe 嵌入，默认是不支持的&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>makefile 简明教程</title>
    <link href="https://rovast.github.io/2020/11/28/makefile-tutorials/"/>
    <id>https://rovast.github.io/2020/11/28/makefile-tutorials/</id>
    <published>2020-11-28T13:39:18.000Z</published>
    <updated>2020-11-28T13:41:13.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Makefile-简明教程"><a href="#Makefile-简明教程" class="headerlink" title="Makefile 简明教程"></a>Makefile 简明教程</h1><blockquote><p> 英文原文地址：<a href="https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/" target="_blank" rel="noopener">https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/</a></p></blockquote><p>Makefiles 是组织代码编译的一种方式。通过这篇简明教程，虽然你不能完整学会 <code>make</code> 指令，但是你可以使用 makefile 来组织小到中型的项目啦。</p><h2 id="一个-简单的例子"><a href="#一个-简单的例子" class="headerlink" title="一个 简单的例子"></a>一个 简单的例子</h2><p>我们来从下面的三个文件开始吧：<code>hellomake.c</code>，<code>hellofunc.c</code>，<code>hellomake.h</code>。这是一个经典 C 语言程序，代码根据功能组织在不同的文件中。</p><p><em>hellomake.c</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hellomake.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 调用另一个文件里的函数</span></span><br><span class="line">  myPrintHelloMake();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>hellofunc.c</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hellomake.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintHelloMake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello makefiles!\n"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>hellomake.h</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* example include file */</span><br><span class="line">void myPrintHelloMake(void);</span><br></pre></td></tr></table></figure><p>一般情况下，我们通过下面的指令来编译代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hellomake hellomake.c hellofunc.c -I.</span><br></pre></td></tr></table></figure><p>我们来说明下这个指令：</p><ol><li>我们编译两个 <code>.c</code> 文件</li><li>命名了编译后的可执行文件为 <code>hellomake</code></li><li><code>-I.</code> 告诉 gcc 在当前目录中寻找 <code>hellomake.h</code></li></ol><p>如果没有使用 makefile，我们在调试开发的时候，可以在终端上输入 <code>向上方向键</code> 来快速显示上次的指令（尤其是你有多个 <code>.c</code> 文件需要编译的时候）。</p><p>然而，通过上面的直接输入编译指令的方式存在两个弊端：</p><ul><li><strong>弊端一：</strong>不方便呀！当你换了电脑之后，你要重新再输入上面的指令。</li><li><strong>弊端二：</strong>编译效率低下！即使你只是修改了项目中的一个 <code>.c</code> 文件，每次编译时，还是需要编译所有的文件，这无疑是效率低下，浪费时间。</li></ul><p>所以接下来，请出本文的主角 —— makefile。</p><h2 id="Makefile1"><a href="#Makefile1" class="headerlink" title="Makefile1"></a>Makefile1</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hellomake: hellomake.c hellofunc.c</span></span><br><span class="line">gcc -o hellomake hellomake.c hellofunc.c -I.</span><br></pre></td></tr></table></figure><p>把上述的内容，放入到 <code>Makefile</code> 或者 <code>makefile</code> 文件，然后在命令行输入 <code>make</code> 命令，就能够直接执行编译了。有以下几点我们需要关注下：</p><ol><li>如果 <code>make</code> 后面没有跟任何参数，那么他就会执行 makefile 的第一条规则。</li><li>把命令依赖的文件放在第一行的 <code>:</code> 后面，这样 <code>make</code> 就能知道，当依赖文件变化时， <code>hellomake</code> 规则需要重新执行。</li><li>注意，第二行 <code>gcc</code> 前面，是一个 <code>tab</code> 制表符！不要使用空格！</li></ol><p>通过这样简单的 Makefile，我们已经解决了弊端一的问题，即：我们不需要每次都输入编译指令了。</p><p>然而，现在还不够高效，即使只修改了一个文件，还是需要全量编译（即编译所有的源文件）。为了使编译更加高效，让我们继续往下看。</p><h2 id="Makefile2"><a href="#Makefile2" class="headerlink" title="Makefile2"></a>Makefile2</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I.</span><br><span class="line"></span><br><span class="line"><span class="section">hellomake: hellomake.o hellofunc.o</span></span><br><span class="line"><span class="variable">$(CC)</span> -o hellomake hellomake.o hellofunc.o</span><br></pre></td></tr></table></figure><p>我们定义了两个常量 <code>CC</code>、 <code>CFLAGS</code>，这两个常量告诉 <code>make</code> 怎么去编译 <code>hellomake.c</code> 和 <code>hellofunc.c</code>。其中 <code>CC</code> 告诉 make 使用哪个 C 编译器，<code>CFLAGS</code> 说明了编译指令的参数列表。通过把 <code>hellomake.o</code> 和 <code>hellofunc.o</code> 放到依赖列表中， <code>make</code> 指令就知道每次需要分别编译 <code>.c</code> 文件，然后再把他们编译为可行性文件 <code>hellomake</code>。</p><p>终端执行效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  makefile-tourial git:(master) ✗ make</span><br><span class="line">gcc -I.   -c -o hellomake.o hellomake.c</span><br><span class="line">gcc -I.   -c -o hellofunc.o hellofunc.c</span><br><span class="line">gcc -o hellomake hellomake.o hellofunc.o</span><br><span class="line">➜  makefile-tourial git:(master) ✗</span><br></pre></td></tr></table></figure><p>这种形式的 makefile 对小型的项目还是比较方便的。然而，还是有个问题，那就是依赖文件的更新。设想下，即使你修改了<code>hellomake.h</code> 文件，<code>make</code> 指令不会重新编译文件。</p><p>为了解决这个问题，我们需要告诉 <code>make</code> 一件事情：即<code>.c</code> 文件和 <code>.h</code> 文件间的依赖关系。好，我们继续往下看。</p><h2 id="Makefile3"><a href="#Makefile3" class="headerlink" title="Makefile3"></a>Makefile3</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I.</span><br><span class="line">DEPS = hellomake.h</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c <span class="variable">$(DEPS)</span></span></span><br><span class="line"><span class="variable">$(CC)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span> <span class="variable">$(CFLAGS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">hellomake: hellomake.o hellofunc.o</span></span><br><span class="line"><span class="variable">$(CC)</span> -o hellomake hellomake.o hellofunc.o</span><br></pre></td></tr></table></figure><p>相较于上个版本，我们先是增加了一个 <code>DEPS</code>：这里列出了 <code>.c</code> 文件所依赖的 <code>.h</code> 文件集合。</p><p>接着，我们定义了一个了规则 <code>%.o: %.c $(DEPS)</code>：它说明了 <code>.o</code> 文件是取决于 <code>.c</code> 文件和 <code>DEPS</code> 里的 <code>.h</code> 文件。</p><p>接下来我们看下规则 <code>$(CC) -c -o $@ $&lt; $(CFLAGS)</code>，意思是说，为了生成这些 <code>.o</code> 文件，<code>make</code> 指令使用了 <code>CC</code> 定义的编译器来编译 <code>.c</code> 文件：</p><ul><li><code>-c</code> 说明了是为了生成目标文件（object files）</li><li><code>$@</code> 代表 <code>:</code> 左边的内容，即：<code>%.o</code></li><li><code>$&lt;</code> 是依赖列表里的第一项，即：<code>%.c</code></li><li><code>CFLAGS</code> 和之前的说明一样，就是编译的指令参数了(flag）</li></ul><p>执行效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  makefile-tourial git:(master) ✗ make</span><br><span class="line">gcc -c -o hellomake.o hellomake.c -I.</span><br><span class="line">gcc -c -o hellofunc.o hellofunc.c -I.</span><br><span class="line">gcc -o hellomake hellomake.o hellofunc.o</span><br><span class="line">➜  makefile-tourial git:(master) ✗</span><br></pre></td></tr></table></figure><p>最后，我们再来做下简化，使编译更具通用性。我们使用 <code>$@</code> 和 <code>$^</code> 来分别表示 <code>:</code>  的左侧和右侧。在下面的例子里，所有 include 文件会作为 <code>DEPS</code> 的一部分，所有目标文件（object files）会作为 <code>OBJ</code> 的一部分。</p><h2 id="Makefile4"><a href="#Makefile4" class="headerlink" title="Makefile4"></a>Makefile4</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I.</span><br><span class="line">DEPS = hellomake.h</span><br><span class="line">OBJ = hellomake.o hellofunc.o</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c <span class="variable">$(DEPS)</span></span></span><br><span class="line"><span class="variable">$(CC)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span> <span class="variable">$(CFLAGS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">hellomake: <span class="variable">$(OBJ)</span></span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span> <span class="variable">$(CFLAGS)</span></span><br></pre></td></tr></table></figure><p>执行效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  makefile-tourial git:(master) ✗ make</span><br><span class="line">gcc -c -o hellomake.o hellomake.c -I.</span><br><span class="line">gcc -c -o hellofunc.o hellofunc.c -I.</span><br><span class="line">gcc -o hellomake hellomake.o hellofunc.o -I.</span><br></pre></td></tr></table></figure><p>让我们来进一步思考下：</p><ul><li>我们能不能把 <code>.h</code> 的文件都放到一个专门的 <code>inlcude</code> 目录，把 <code>.c</code> 文件都放到一个专门的 <code>src</code>目录？</li><li>我们能不能把这些烦人的 <code>.o</code> 文件都隐藏起来？</li></ul><p>当然是可以的！我们会在下一个 makefile 中把对应的文件放到 <code>include</code> 和  <code>lib</code>文件夹中，并且把生成的目标文件都放到 <code>src</code> 的 <code>obj</code> 子目录中。除此之外，我们还可以定义任何我们想包含的库文件，比如常用的 math library <code>-lm</code>。这个 makefile 放在 <code>src</code> 目录里。</p><p>需要注意的是，我们还定义了一个 <code>clean</code> 规则，用来把生成的目标文件清除（使用 <code>make clean</code> 命令）。<code>.PHONY</code> 防止 <code>make</code> 清除名为 <code>clean</code> 的文件。</p><p>文件路径为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  src git:(master) ✗ tree          </span><br><span class="line">.</span><br><span class="line">├── hellofunc.c</span><br><span class="line">├── hellomake</span><br><span class="line">├── hellomake.c</span><br><span class="line">├── makefile</span><br><span class="line">└── obj</span><br><span class="line">    ├── hellofunc.o</span><br><span class="line">    └── hellomake.o</span><br><span class="line"></span><br><span class="line">1 directory, 6 files</span><br></pre></td></tr></table></figure><h2 id="Makefile5"><a href="#Makefile5" class="headerlink" title="Makefile5"></a>Makefile5</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">IDIR = ../<span class="keyword">include</span></span><br><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I<span class="variable">$(DIR)</span></span><br><span class="line"></span><br><span class="line">ODIR=obj</span><br><span class="line">LDIR=../lib</span><br><span class="line"></span><br><span class="line">LIBS=-lm</span><br><span class="line"></span><br><span class="line">_DEPS = hellomake.h</span><br><span class="line">DEPS=<span class="variable">$(<span class="built_in">patsubst</span> %,<span class="variable">$(IDIR)</span>/%,<span class="variable">$(_DEPS)</span>)</span></span><br><span class="line"></span><br><span class="line">_OBJ = hellomake.o hellofunc.o</span><br><span class="line">OBJ=<span class="variable">$(<span class="built_in">patsubst</span> %,<span class="variable">$(ODIR)</span>/%,<span class="variable">$(_OBJ)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(ODIR)</span>/%.o: %.c <span class="variable">$(DEPS)</span>(</span><br><span class="line"><span class="variable">$(CC)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span> <span class="variable">$(CFLAGS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">hellomake: <span class="variable">$(OBJ)</span></span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(LIBS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f <span class="variable">$(ODIR)</span>/*.o *~ core <span class="variable">$(INCDIR)</span>/*~</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  src git:(master) ✗ make</span><br><span class="line">gcc -c -o obj/hellomake.o hellomake.c -I../include</span><br><span class="line">gcc -c -o obj/hellofunc.o hellofunc.c -I../include</span><br><span class="line">gcc -o hellomake obj/hellomake.o obj/hellofunc.o -I../include</span><br></pre></td></tr></table></figure><blockquote><p>注意要在 <code>src</code> 目录下运行，并且要把 <code>.h</code> 文件放到 <code>include</code> 目录里</p></blockquote><p>好了，到目前为止，你已经有了一个不错的 makefile 了，现在你能 hold 住一个中型的项目了。你也可以增加更多的规则到 makefile 里，你甚至可以在一个规则中调用另一个规则。</p><p>想知道更多关于 makefile 和 make 的信息，就去查阅 <a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">GNU Make Manual</a> 吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Makefile-简明教程&quot;&gt;&lt;a href=&quot;#Makefile-简明教程&quot; class=&quot;headerlink&quot; title=&quot;Makefile 简明教程&quot;&gt;&lt;/a&gt;Makefile 简明教程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 英文原文地址：&lt;a hr
      
    
    </summary>
    
      <category term="编程" scheme="https://rovast.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>借助 skywalking 搭建自己的 APM 数据展示平台</title>
    <link href="https://rovast.github.io/2020/11/28/build-your-own-ui-for-skywalking/"/>
    <id>https://rovast.github.io/2020/11/28/build-your-own-ui-for-skywalking/</id>
    <published>2020-11-28T09:27:41.000Z</published>
    <updated>2020-11-28T11:10:56.931Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/11/28/build-your-own-ui-for-skywalking/logo.jpeg" width="500" height="400"><blockquote><p>SkyWalking: an APM(application performance monitor) system, especially designed for microservices, cloud native and container-based (Docker, Kubernetes, Mesos) architectures.</p><footer><strong>README.md</strong><cite><a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">github.com/apache/skywalking</a></cite></footer></blockquote><p>skywaking(本文后续简称 SW) 在如今的 APM 体系建设中逐渐展露头角，国内几乎所有的一线大厂都借助 skywaling 进行了自己的 APM 体系建设。<br>大厂的建设方案在诸多的大会中都有提及，尤其在刚过去的 《Apache SkyWalking DevCon 2020》，更是带来了诸多的精彩分享。</p><p>本文不会就 APM 架构或理论进行详细阐述，更多聚焦在实战环节，围绕下述几点展开：</p><ol><li>分析 SW 架构，确定接入方案</li><li>如何在本地调式官方的 UI 项目</li><li>快速了解 SW 查询协议 GraphQL </li></ol><h1 id="Skywalking-架构简介，寻找接入点"><a href="#Skywalking-架构简介，寻找接入点" class="headerlink" title="Skywalking 架构简介，寻找接入点"></a>Skywalking 架构简介，寻找接入点</h1><h2 id="几个官方库"><a href="#几个官方库" class="headerlink" title="几个官方库"></a>几个官方库</h2><p>在正式分析之前，我们来看下 SW 比较重要的三个官方项目</p><ul><li>主库 <a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">https://github.com/apache/skywalking</a></li><li>UI 库 <a href="https://github.com/apache/skywalking-rocketbot-ui" target="_blank" rel="noopener">https://github.com/apache/skywalking-rocketbot-ui</a></li><li>查询协议库 <a href="https://github.com/apache/skywalking-query-protocol" target="_blank" rel="noopener">https://github.com/apache/skywalking-query-protocol</a></li></ul><h2 id="SW-查询协议-——-获取数据的桥梁"><a href="#SW-查询协议-——-获取数据的桥梁" class="headerlink" title="SW 查询协议 —— 获取数据的桥梁"></a>SW 查询协议 —— 获取数据的桥梁</h2><p>接下来，我们看下主库的架构图，即 SW 体系的整体架构图：</p><img src="/2020/11/28/build-your-own-ui-for-skywalking/jiagou.jpeg" width="500" height="400"><p>我们关注的 UI 接入部分，在图的左上角，其中 UI 和 CLI 通过查询协议来和 SW 的后端服务进行交互。正如查询协议库所说：</p><blockquote><p>Query Protocol defines the communication protocol in query stage.<br><strong>SkyWalking native UI</strong> and <strong>CLI</strong> use this protocol to <strong>fetch data from the backend</strong> consistently, don’t need to worry about the backend update.</p><footer><strong>README.md</strong><cite><a href="https://github.com/apache/skywalking-query-protocol" target="_blank" rel="noopener">github.com/apache/skywalking-query-protocol</a></cite></footer></blockquote><p>其中重点我们加粗表示了，即：SW 的官方 UI 和 CLI 工具都是通过查询协议和后端服务进行数据交互。</p><p>SW 的查询协议通俗简单的理解：定义了一系列 GraphQL 查询定义。甚至可以进一步粗暴的理解，就是一堆定义好的 HTTP API。所以只要了解官方的 API 定义，即可发挥 SW 的数据宝藏威力，<br>打造属于自己的 APM 展示平台。</p><p>快速搭建的第一步，就是参考官方的 UI 项目，一方面我们可以参考它的 UI 组件实现。另一方面，我们可以抓包，参考它的 GraphQL 请求。</p><h1 id="官网项目本地调试"><a href="#官网项目本地调试" class="headerlink" title="官网项目本地调试"></a>官网项目本地调试</h1><h2 id="本地运行一览"><a href="#本地运行一览" class="headerlink" title="本地运行一览"></a>本地运行一览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置后端的请求地址为 SW 官方的北京机房演示地址</span></span><br><span class="line">➜  skywalking-rocketbot-ui git:(master) <span class="built_in">export</span> SW_PROXY_TARGET=http://122.112.182.72:8080/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务，之后访问 8080 端口</span></span><br><span class="line">➜  skywalking-rocketbot-ui git:(master) npm run serve</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8080/topology" target="_blank" rel="noopener">http://localhost:8080/topology</a></p><img src="/2020/11/28/build-your-own-ui-for-skywalking/ui.jpg"><p>我们看到，服务已成功在本地运行，且可以通过 VueDev Tools 来查看对应的组件实现和传值。对我们自己去实现对应的显示组件，提供了极高的参考意义。</p><blockquote><p>关于如何这个环境变量的设置，大家可以顺着 packages.json 去捋一下 run server 的整个流程</p></blockquote><h2 id="服务抓包格式化"><a href="#服务抓包格式化" class="headerlink" title="服务抓包格式化"></a>服务抓包格式化</h2><p>我们还是以这个拓扑为例，抓一个包，简单看下 GraphQL 请求</p><figure class="highlight json"><figcaption><span>requestPayload</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"query queryTopo($duration: Duration!) &#123;\n  topo: getGlobalTopology(duration: $duration) &#123;\n    nodes &#123;\n      id\n      name\n      type\n      isReal\n    &#125;\n    calls &#123;\n      id\n      source\n      detectPoints\n      target\n    &#125;\n  &#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"variables"</span>: &#123;</span><br><span class="line">    <span class="attr">"serviceId"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"duration"</span>: &#123;</span><br><span class="line">      <span class="attr">"start"</span>: <span class="string">"2020-11-27 0912"</span>,</span><br><span class="line">      <span class="attr">"end"</span>: <span class="string">"2020-11-27 0927"</span>,</span><br><span class="line">      <span class="attr">"step"</span>: <span class="string">"MINUTE"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进一步格式化 graphQL 的 query 请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">query queryTopo($duration: Duration!) &#123;</span><br><span class="line">  topo: getGlobalTopology(duration: $duration) &#123;</span><br><span class="line">    nodes &#123;</span><br><span class="line">      id</span><br><span class="line">      name</span><br><span class="line">      type</span><br><span class="line">      isReal</span><br><span class="line">    &#125;</span><br><span class="line">    calls &#123;</span><br><span class="line">      id</span><br><span class="line">      source</span><br><span class="line">      detectPoints</span><br><span class="line">      target</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>格式化过后，更方便我们进行对应分析。</p><h1 id="分析查询协议"><a href="#分析查询协议" class="headerlink" title="分析查询协议"></a>分析查询协议</h1><h2 id="快速了解查询语句含义"><a href="#快速了解查询语句含义" class="headerlink" title="快速了解查询语句含义"></a>快速了解查询语句含义</h2><p>GraphQL 的更多用法，本文不提及。文本就上述抓到的协议进行简单说明，便于之前不了解 GraphQL 的同学能够快速了解 SW 查询协议。</p><ol><li>查看 Query，确定查询语句，其中 <code>$</code> 开头的就是形参，在 <code>variables</code> 里会具体传值</li><li>那上述例子，<code>$duration</code> 的具体值，就是 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"start"</span>: <span class="string">"2020-11-27 0912"</span>,</span><br><span class="line">  <span class="attr">"end"</span>: <span class="string">"2020-11-27 0927"</span>,</span><br><span class="line">  <span class="attr">"step"</span>: <span class="string">"MINUTE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>那问题来了，我怎么知道 <code>$duration</code> 是由 <code>start</code> <code>end</code> <code>step</code> 组成？他们的值类型是什么？在哪里定义？这就要看之前我们提到的 SW 查询协议。</p><h2 id="查询协议"><a href="#查询协议" class="headerlink" title="查询协议"></a>查询协议</h2><p>接着上面的分析，我们去查看 SW 的 Query Protocol.</p><blockquote><p>到这里大家看到，其实 Query Protocol 就是查询的定义，标准。就像我们平时开发中接触的后端标准接口一样。大家在接触这些看似<br>高大上的 Query Protocol 时，不要被唬到，其实就是相同技术在不同场合的不同叫法罢了。</p></blockquote><p>本例中的拓扑，我们可以查看 <a href="https://github.com/apache/skywalking-query-protocol/blob/master/topology.graphqls" target="_blank" rel="noopener">https://github.com/apache/skywalking-query-protocol/blob/master/topology.graphqls</a> 定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extend type Query &#123;</span><br><span class="line">    # Query the global topology</span><br><span class="line">    getGlobalTopology(duration: Duration!): Topology</span><br><span class="line">    # Query the topology, based on the given service</span><br><span class="line">    getServiceTopology(serviceId: ID!, duration: Duration!): Topology</span><br><span class="line">    # Query the topology, based on the given services.</span><br><span class="line">    # `#getServiceTopology` could be replaced by this.</span><br><span class="line">    getServicesTopology(serviceIds: [ID!]!, duration: Duration!): Topology</span><br><span class="line">    # Query the instance topology, based on the given clientServiceId and serverServiceId</span><br><span class="line">    getServiceInstanceTopology(clientServiceId: ID!, serverServiceId: ID!, duration: Duration!): ServiceInstanceTopology</span><br><span class="line">    # Query the topology, based on the given endpoint</span><br><span class="line">    getEndpointTopology(endpointId: ID!, duration: Duration!): Topology</span><br><span class="line">    # v2 of getEndpointTopology</span><br><span class="line">    getEndpointDependencies(endpointId: ID!, duration: Duration!): EndpointTopology</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到其中就有 <code>getGlobalTopology</code>，再看看我们之前的抓包，我能看下第二行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">query queryTopo($duration: Duration!) &#123;</span><br><span class="line">  topo: getGlobalTopology(duration: $duration) &#123;</span><br><span class="line">    nodes &#123;</span><br><span class="line">      id</span><br><span class="line">      name</span><br><span class="line">      type</span><br><span class="line">      isReal</span><br><span class="line">    &#125;</span><br><span class="line">    calls &#123;</span><br><span class="line">      id</span><br><span class="line">      source</span><br><span class="line">      detectPoints</span><br><span class="line">      target</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二行内容 <code>topo: getGlobalTopology(duration: $duration) {</code></p><ul><li>topo 是查询结果的别名，查询到 response 会放到 topo 字段下</li><li>getGlobalTopology 的定义就是 <code>getGlobalTopology(duration: Duration!): Topology</code></li></ul><p>其中 <code>Duration</code> 定义，我们在 <a href="https://github.com/apache/skywalking-query-protocol/blob/master/common.graphqls" target="_blank" rel="noopener">https://github.com/apache/skywalking-query-protocol/blob/master/common.graphqls</a> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input Duration &#123;</span><br><span class="line">    start: String!</span><br><span class="line">    end: String!</span><br><span class="line">    step: Step!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像套娃一样，你也可以找到 <code>Step</code> 的定义</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文聊了我们如何找到自定义 UI 的切入点，同时就如何参考官方的一些开发细节进行了阐述。希望能给大家自定义数据展示平台一些参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/11/28/build-your-own-ui-for-skywalking/logo.jpeg&quot; width=&quot;500&quot; height=&quot;400&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;SkyWalking: an APM(application pe
      
    
    </summary>
    
      <category term="云原生" scheme="https://rovast.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://rovast.github.io/2020/11/28/hello-world/"/>
    <id>https://rovast.github.io/2020/11/28/hello-world/</id>
    <published>2020-11-28T08:49:18.064Z</published>
    <updated>2020-11-28T08:49:18.064Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install php7.2 on Ubuntu 18.04 LTS</title>
    <link href="https://rovast.github.io/2019/12/02/install-php72-ubuntu/"/>
    <id>https://rovast.github.io/2019/12/02/install-php72-ubuntu/</id>
    <published>2019-12-02T01:54:24.000Z</published>
    <updated>2020-11-28T08:49:18.065Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 php7.2</span></span><br><span class="line">sudo apt-get install php7.2 php7.2-fpm \</span><br><span class="line">php7.2-mysql php7.2-curl php7.2-mbstring php7.2-gd php7.2-xml php7.2-soap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 mcrypt</span></span><br><span class="line">sudo apt install php-dev libmcrypt-dev php-pear</span><br><span class="line">sudo pecl channel-update pecl.php.net</span><br><span class="line">sudo pecl install mcrypt-1.0.1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/php/7.2/cli/php.ini</span><br><span class="line">sudo vi /etc/php/7.2/fpm/php.ini</span><br><span class="line"><span class="comment"># 最后加上 `extension=mcrypt.so`</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/php/7.2/fpm/pool.d/www.conf</span><br><span class="line"><span class="comment"># 修改 listen 为 127.0.0.1:9000</span></span><br></pre></td></tr></table></figure><h1 id="测试-nginx-是否可用"><a href="#测试-nginx-是否可用" class="headerlink" title="测试 nginx 是否可用"></a>测试 nginx 是否可用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="Linux" scheme="https://rovast.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装</title>
    <link href="https://rovast.github.io/2019/11/28/install-docker/"/>
    <id>https://rovast.github.io/2019/11/28/install-docker/</id>
    <published>2019-11-28T09:06:18.000Z</published>
    <updated>2020-11-28T08:49:18.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装 docker</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">// 注意更改所属用户组</span><br><span class="line">sudo usermod -aG docker YOUR_GROUP</span><br></pre></td></tr></table></figure><p>注销用户后重新登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 启动　docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 安装 docker-compose</span><br><span class="line">sudo pip install -U docker-compose</span><br><span class="line"></span><br><span class="line">// 如果没有 pip</span><br><span class="line">sudo apt-get install python-pi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="docker" scheme="https://rovast.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度</title>
    <link href="https://rovast.github.io/2019/11/06/time-complexity/"/>
    <id>https://rovast.github.io/2019/11/06/time-complexity/</id>
    <published>2019-11-06T01:35:45.000Z</published>
    <updated>2020-11-28T08:49:18.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>技术人员的内功修炼：操作系统、计算机网络、编译原理、数据结构与算法。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度分下面几个维度：</p><ul><li>最好时间复杂度（Best Case Time Complexity）</li><li>最坏时间复杂度（Worst Case Time Complexity）</li><li>平均时间复杂度（Average Case Time Complexity）</li><li>均摊时间复杂度（Amortized Time Complexity）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;技术人员的内功修炼：操作系统、计算机网络、编译原理、数据结构与算法。&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="基础" scheme="https://rovast.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构与算法" scheme="https://rovast.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用 www-data 用户运行定时任务（cron）</title>
    <link href="https://rovast.github.io/2019/11/04/run-cron-with-www-data/"/>
    <id>https://rovast.github.io/2019/11/04/run-cron-with-www-data/</id>
    <published>2019-11-04T07:03:07.000Z</published>
    <updated>2020-11-28T08:49:18.081Z</updated>
    
    <content type="html"><![CDATA[<p>其实这个没啥好说的，就是记录下解决的过程（说得好像跟一篇水文似的…）。或者给遇到这类问题的小伙伴提供个思路。</p><h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>我们在部署 web 服务时，经常用到定时任务。正常的流程就是直接执行下面的指令来配置定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>问题来了，正常情况下，这个指令在哪个用户下面执行，这个权限就是谁的（如果你听不懂我在说啥，那基本就是属于 root的）。</p><blockquote><p>定时任务本身的配置也是个精细活，你可以阅读下 <a href="https://learnku.com/articles/25177" target="_blank" rel="noopener">https://learnku.com/articles/25177</a> 看看你之前用的姿势是不是还能优化。</p></blockquote><p><strong>常见问题之日志权限</strong></p><p>这怕是最常见的问题了。定时任务出错了，记录日志到 <code>storage/logs</code> 里了，一般就是 <code>laravel.log</code> 文件。</p><p>此时 <code>laravel.log</code> 所属者就是 root 了。</p><p>用户通过浏览器访问我们网站，如果出错，以 www-data 身份尝试记录到 <code>storage/logs/laravel.log</code>，然后<strong>写不进去</strong>，一直报错，真香！</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>打开谷歌搜索 <code>run cron job as www-data</code>。找到了文章 <a href="https://askubuntu.com/questions/189189/how-to-run-crontab-as-userwww-data" target="_blank" rel="noopener">https://askubuntu.com/questions/189189/how-to-run-crontab-as-userwww-data</a></p><p>谷歌真香！</p><p>具体的意思，就是直接在 <code>/etc/crontab</code> 中编辑定时任务即可，加上用户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/crontab: system-wide crontab</span></span><br><span class="line"><span class="comment"># Unlike any other crontab you don't have to run the `crontab'</span></span><br><span class="line"><span class="comment"># command to install the new version when you edit this file</span></span><br><span class="line"><span class="comment"># and files in /etc/cron.d. These files also have username fields,</span></span><br><span class="line"><span class="comment"># that none of the other crontabs do.</span></span><br><span class="line"></span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br><span class="line">17 *    * * *   root    <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class="line">25 6    * * *   root    <span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.daily )</span><br><span class="line">47 6    * * 7   root    <span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.weekly )</span><br><span class="line">52 6    1 * *   root    <span class="built_in">test</span> -x /usr/sbin/anacron || ( <span class="built_in">cd</span> / &amp;&amp; run-parts --report /etc/cron.monthly )</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cron</span></span><br><span class="line">* * * * *  www-data flock /tmp/flock1.lock -c <span class="string">'timeout 200 /usr/local/bin/php /var/www/html/laravel/artisan command &gt;&gt; /home/log/laravel.log 2&gt;&amp;1'</span></span><br></pre></td></tr></table></figure><p>啰嗦下：</p><ul><li>flock 用来防止重复执行，起到原子锁作用</li><li>timeout 表示这个脚本执行过长，咱就干死它，可以有效避免各种循环或长时间占用问题</li><li><code>&gt;&gt;</code> 表示向文件中追加内容</li><li><code>2&gt;&amp;1</code> 表示将标准错误输出重定向到正确输出（这样你万一有程序出错，也能记录下）</li></ul><h2 id="真香后传（更新于-2019年11月06日19-38-27）"><a href="#真香后传（更新于-2019年11月06日19-38-27）" class="headerlink" title="真香后传（更新于 2019年11月06日19:38:27）"></a>真香后传（更新于 2019年11月06日19:38:27）</h2><p>如果你按照上述的进行，你会发现还是执行不了定时任务。因为 <code>www-data</code> 默认是不能执行 bash 相关操作的。</p><p>使用真香的谷歌搜索 <code>www-data run cron error</code>，我们发现了宝藏  <a href="https://ubuntuforums.org/showthread.php?t=2334330" target="_blank" rel="noopener">https://ubuntuforums.org/showthread.php?t=2334330</a></p><blockquote><p>The www-data user is not able to invoke a shell by default. In /etc/passwd you’ll see<br>  Code:<br>  www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>  If you want to be able to run scripts as that user, you’ll need to change “/usr/sbin/nologin” to “/bin/bash”.</p></blockquote><p>好了，咱们把 <code>/etc/passwd</code> 里面 <code>www-data</code> 对应的那一行改下就可以了。</p><p><strong>另外</strong></p><p>其实你还可以用 <code>crontab -u www-data CRON_FILE</code> 来指定用户运行指定的定时任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实这个没啥好说的，就是记录下解决的过程（说得好像跟一篇水文似的…）。或者给遇到这类问题的小伙伴提供个思路。&lt;/p&gt;
&lt;h2 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h2&gt;&lt;p&gt;我们在部署 we
      
    
    </summary>
    
      <category term="Linux" scheme="https://rovast.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://rovast.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>macos 莫名失去焦点</title>
    <link href="https://rovast.github.io/2019/10/15/macos-lost-focus/"/>
    <id>https://rovast.github.io/2019/10/15/macos-lost-focus/</id>
    <published>2019-10-15T15:05:22.000Z</published>
    <updated>2020-11-28T08:49:18.067Z</updated>
    
    <content type="html"><![CDATA[<p>执行下述 python 代码，观测除了当前应用程序外，还有谁占用了焦点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> AppKit <span class="keyword">import</span> NSWorkspace</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = range(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    activeAppName = NSWorkspace.sharedWorkspace().activeApplication()[<span class="string">'NSApplicationName'</span>]</span><br><span class="line">    <span class="keyword">print</span> activeAppName</span><br></pre></td></tr></table></figure><p>查看输出即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;执行下述 python 代码，观测除了当前应用程序外，还有谁占用了焦点&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git diff between {working dir, staged area, last commit}</title>
    <link href="https://rovast.github.io/2019/09/24/git-diff/"/>
    <id>https://rovast.github.io/2019/09/24/git-diff/</id>
    <published>2019-09-24T08:48:59.000Z</published>
    <updated>2020-11-28T08:49:18.052Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考链接： <a href="http://xahlee.info/linux/git_diff.html" target="_blank" rel="noopener">http://xahlee.info/linux/git_diff.html</a></p></blockquote><p>本文阐述 git diff 的不同用法。</p><p>git 中有三个主要区域</p><ul><li>Working Directory 工作区。当前用户正在工作的区域</li><li>Staging Area（也被叫做 cache，index）。使用 <code>git add</code> 后存放的临时位置</li><li>HEAD 指向一个 commit 位置。通常情况下，是指上一次提交</li></ul><p>上面的三个区域，都是在你本地的。每个 commit 都会有一个特定的标识（id），我们称之为 commit id。</p><h2 id="如何查看-commit"><a href="#如何查看-commit" class="headerlink" title="如何查看 commit"></a>如何查看 commit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示最近的三次 commit</span></span><br><span class="line">git log -3</span><br></pre></td></tr></table></figure><h2 id="diff-between-working-dir-staging-area"><a href="#diff-between-working-dir-staging-area" class="headerlink" title="diff between {working dir, staging area}"></a>diff between {working dir, staging area}</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> diff working dir, staging area</span></span><br><span class="line">git diff --color</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> diff working dir, staging area, 1 file</span></span><br><span class="line">git diff --color filename</span><br></pre></td></tr></table></figure><h2 id="diff-between-staging-area-last-commit"><a href="#diff-between-staging-area-last-commit" class="headerlink" title="diff between {staging area, last commit}"></a>diff between {staging area, last commit}</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> diff satging area, last commit. 其中 staged 参数也可用 cached 替代</span></span><br><span class="line">git diff --color --staged &lt;commitID&gt;</span><br></pre></td></tr></table></figure><h2 id="diff-between-last-commit-working-dir"><a href="#diff-between-last-commit-working-dir" class="headerlink" title="diff between {last commit, working dir}"></a>diff between {last commit, working dir}</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --color &lt;commitID&gt;</span><br></pre></td></tr></table></figure><h2 id="对同一分支的两个-commit-进行-diff"><a href="#对同一分支的两个-commit-进行-diff" class="headerlink" title="对同一分支的两个 commit 进行 diff"></a>对同一分支的两个 commit 进行 diff</h2><ol><li><code>git log file_name</code></li><li><code>git diff commit_ID_1 commit_ID_2 file_name</code></li></ol><h2 id="查看哪些文件被-staged-了"><a href="#查看哪些文件被-staged-了" class="headerlink" title="查看哪些文件被 staged 了"></a>查看哪些文件被 staged 了</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取当前的状态</span></span><br><span class="line">git status .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推荐使用下面的，简洁明了</span></span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考链接： &lt;a href=&quot;http://xahlee.info/linux/git_diff.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://xahlee.info/linux/git_diff.html
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://rovast.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>view-ascii-on-linux</title>
    <link href="https://rovast.github.io/2019/08/22/view-ascii-on-linux/"/>
    <id>https://rovast.github.io/2019/08/22/view-ascii-on-linux/</id>
    <published>2019-08-22T01:39:33.000Z</published>
    <updated>2020-11-28T08:49:18.090Z</updated>
    
    <content type="html"><![CDATA[<p>开发中会经常查看 ascii 表，没想到在 linux 上可以直接查看，记录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ascii</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">ASCII(7)                                                                                                            Linux Programmer<span class="string">'s Manual                                                                                                            ASCII(7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NAME</span></span><br><span class="line"><span class="string">       ascii - ASCII character set encoded in octal, decimal, and hexadecimal</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br><span class="line"><span class="string">       ASCII is the American Standard Code for Information Interchange.  It is a 7-bit code.  Many 8-bit codes (e.g., ISO 8859-1) contain ASCII as their lower half.  The international counterpart of ASCII is known as ISO 646-IRV.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       The following table contains the 128 ASCII characters.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       C program '</span>\X<span class="string">' escapes are noted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Oct   Dec   Hex   Char                        Oct   Dec   Hex   Char</span></span><br><span class="line"><span class="string">       ────────────────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="string">       000   0     00    NUL '</span>\0<span class="string">' (null character)   100   64    40    @</span></span><br><span class="line"><span class="string">       001   1     01    SOH (start of heading)      101   65    41    A</span></span><br><span class="line"><span class="string">       002   2     02    STX (start of text)         102   66    42    B</span></span><br><span class="line"><span class="string">       003   3     03    ETX (end of text)           103   67    43    C</span></span><br><span class="line"><span class="string">       004   4     04    EOT (end of transmission)   104   68    44    D</span></span><br><span class="line"><span class="string">       005   5     05    ENQ (enquiry)               105   69    45    E</span></span><br><span class="line"><span class="string">       006   6     06    ACK (acknowledge)           106   70    46    F</span></span><br><span class="line"><span class="string">       007   7     07    BEL '</span>\a<span class="string">' (bell)             107   71    47    G</span></span><br><span class="line"><span class="string">       010   8     08    BS  '</span>\b<span class="string">' (backspace)        110   72    48    H</span></span><br><span class="line"><span class="string">       011   9     09    HT  '</span>\t<span class="string">' (horizontal tab)   111   73    49    I</span></span><br><span class="line"><span class="string">       012   10    0A    LF  '</span>\n<span class="string">' (new line)         112   74    4A    J</span></span><br><span class="line"><span class="string">       013   11    0B    VT  '</span>\v<span class="string">' (vertical tab)     113   75    4B    K</span></span><br><span class="line"><span class="string">       014   12    0C    FF  '</span>\f<span class="string">' (form feed)        114   76    4C    L</span></span><br><span class="line"><span class="string">       015   13    0D    CR  '</span>\r<span class="string">' (carriage ret)     115   77    4D    M</span></span><br><span class="line"><span class="string">       016   14    0E    SO  (shift out)             116   78    4E    N</span></span><br><span class="line"><span class="string">       017   15    0F    SI  (shift in)              117   79    4F    O</span></span><br><span class="line"><span class="string">       020   16    10    DLE (data link escape)      120   80    50    P</span></span><br><span class="line"><span class="string">       021   17    11    DC1 (device control 1)      121   81    51    Q</span></span><br><span class="line"><span class="string">       022   18    12    DC2 (device control 2)      122   82    52    R</span></span><br><span class="line"><span class="string">       023   19    13    DC3 (device control 3)      123   83    53    S</span></span><br><span class="line"><span class="string">       024   20    14    DC4 (device control 4)      124   84    54    T</span></span><br><span class="line"><span class="string">       025   21    15    NAK (negative ack.)         125   85    55    U</span></span><br><span class="line"><span class="string">       026   22    16    SYN (synchronous idle)      126   86    56    V</span></span><br><span class="line"><span class="string">       027   23    17    ETB (end of trans. blk)     127   87    57    W</span></span><br><span class="line"><span class="string">       030   24    18    CAN (cancel)                130   88    58    X</span></span><br><span class="line"><span class="string">       031   25    19    EM  (end of medium)         131   89    59    Y</span></span><br><span class="line"><span class="string">       032   26    1A    SUB (substitute)            132   90    5A    Z</span></span><br><span class="line"><span class="string">       033   27    1B    ESC (escape)                133   91    5B    [</span></span><br><span class="line"><span class="string">       034   28    1C    FS  (file separator)        134   92    5C    \  '</span>\\<span class="string">'</span></span><br><span class="line"><span class="string">       035   29    1D    GS  (group separator)       135   93    5D    ]</span></span><br><span class="line"><span class="string">       036   30    1E    RS  (record separator)      136   94    5E    ^</span></span><br><span class="line"><span class="string">       037   31    1F    US  (unit separator)        137   95    5F    _</span></span><br><span class="line"><span class="string">       040   32    20    SPACE                       140   96    60    `</span></span><br><span class="line"><span class="string">       041   33    21    !                           141   97    61    a</span></span><br><span class="line"><span class="string">       042   34    22    "                           142   98    62    b</span></span><br><span class="line"><span class="string">       043   35    23    #                           143   99    63    c</span></span><br><span class="line"><span class="string">       044   36    24    $                           144   100   64    d</span></span><br><span class="line"><span class="string">       045   37    25    %                           145   101   65    e</span></span><br><span class="line"><span class="string">       046   38    26    &amp;                           146   102   66    f</span></span><br><span class="line"><span class="string">       047   39    27    '</span>                           147   103   67    g</span><br><span class="line">       050   40    28    (                           150   104   68    h</span><br><span class="line">       051   41    29    )                           151   105   69    i</span><br><span class="line">       052   42    2A    *                           152   106   6A    j</span><br><span class="line">       053   43    2B    +                           153   107   6B    k</span><br><span class="line">       054   44    2C    ,                           154   108   6C    l</span><br><span class="line">       055   45    2D    -                           155   109   6D    m</span><br><span class="line">       056   46    2E    .                           156   110   6E    n</span><br><span class="line">       057   47    2F    /                           157   111   6F    o</span><br><span class="line">       060   48    30    0                           160   112   70    p</span><br><span class="line"></span><br><span class="line">       061   49    31    1                           161   113   71    q</span><br><span class="line">       062   50    32    2                           162   114   72    r</span><br><span class="line">       063   51    33    3                           163   115   73    s</span><br><span class="line">       064   52    34    4                           164   116   74    t</span><br><span class="line">       065   53    35    5                           165   117   75    u</span><br><span class="line">       066   54    36    6                           166   118   76    v</span><br><span class="line">       067   55    37    7                           167   119   77    w</span><br><span class="line">       070   56    38    8                           170   120   78    x</span><br><span class="line">       071   57    39    9                           171   121   79    y</span><br><span class="line">       072   58    3A    :                           172   122   7A    z</span><br><span class="line">       073   59    3B    ;                           173   123   7B    &#123;</span><br><span class="line">       074   60    3C    &lt;                           174   124   7C    |</span><br><span class="line">       075   61    3D    =                           175   125   7D    &#125;</span><br><span class="line">       076   62    3E    &gt;                           176   126   7E    ~</span><br><span class="line">       077   63    3F    ?                           177   127   7F    DEL</span><br><span class="line"></span><br><span class="line">   Tables</span><br><span class="line">       For convenience, below are more compact tables <span class="keyword">in</span> hex and decimal.</span><br><span class="line"></span><br><span class="line">          2 3 4 5 6 7       30 40 50 60 70 80 90 100 110 120</span><br><span class="line">        -------------      ---------------------------------</span><br><span class="line">       0:   0 @ P ` p     0:    (  2  &lt;  F  P  Z  d   n   x</span><br><span class="line">       1: ! 1 A Q a q     1:    )  3  =  G  Q  [  e   o   y</span><br><span class="line">       2: <span class="string">" 2 B R b r     2:    *  4  &gt;  H  R  \  f   p   z</span></span><br><span class="line"><span class="string">       3: # 3 C S c s     3: !  +  5  ?  I  S  ]  g   q   &#123;</span></span><br><span class="line"><span class="string">       4: $ 4 D T d t     4: "</span>  ,  6  @  J  T  ^  h   r   |</span><br><span class="line">       5: % 5 E U e u     5: <span class="comment">#  -  7  A  K  U  _  i   s   &#125;</span></span><br><span class="line">       6: &amp; 6 F V f v     6: $  .  8  B  L  V  `  j   t   ~</span><br><span class="line">       7: <span class="string">' 7 G W g w     7: %  /  9  C  M  W  a  k   u  DEL</span></span><br><span class="line"><span class="string">       8: ( 8 H X h x     8: &amp;  0  :  D  N  X  b  l   v</span></span><br><span class="line"><span class="string">       9: ) 9 I Y i y     9: '</span>  1  ;  E  O  Y  c  m   w</span><br><span class="line">       A: * : J Z j z</span><br><span class="line">       B: + ; K [ k &#123;</span><br><span class="line">       C: , &lt; L \ l |</span><br><span class="line">       D: - = M ] m &#125;</span><br><span class="line">       E: . &gt; N ^ n ~</span><br><span class="line">       F: / ? O _ o DEL</span><br><span class="line"></span><br><span class="line">NOTES</span><br><span class="line">   History</span><br><span class="line">       An ascii manual page appeared <span class="keyword">in</span> Version 7 of AT&amp;T UNIX.</span><br><span class="line"></span><br><span class="line">       On older terminals, the underscore code is displayed as a left arrow, called backarrow, the caret is displayed as an up-arrow and the vertical bar has a hole <span class="keyword">in</span> the middle.</span><br><span class="line"></span><br><span class="line">       Uppercase  and  lowercase  characters differ by just one bit and the ASCII character 2 differs from the double quote by just one bit, too.  That made it much easier to encode characters mechanically or with a non-microcontroller-based electronic key‐</span><br><span class="line">       board and that pairing was found on old teletypes.</span><br><span class="line"></span><br><span class="line">       The ASCII standard was published by the United States of America Standards Institute (USASI) <span class="keyword">in</span> 1968.</span><br><span class="line"></span><br><span class="line">SEE ALSO</span><br><span class="line">       charsets(7), iso_8859-1(7), iso_8859-10(7), iso_8859-11(7), iso_8859-13(7), iso_8859-14(7), iso_8859-15(7), iso_8859-16(7), iso_8859-2(7),  iso_8859-3(7),  iso_8859-4(7),  iso_8859-5(7),  iso_8859-6(7),  iso_8859-7(7),  iso_8859-8(7),  iso_8859-9(7),</span><br><span class="line">       utf-8(7)</span><br><span class="line"></span><br><span class="line">COLOPHON</span><br><span class="line">       This page is part of release 4.15 of the Linux man-pages project.  A description of the project, information about reporting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.</span><br><span class="line"></span><br><span class="line">Linux                                                                                                                       2016-10-08                                                                                                                   ASCII(7)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发中会经常查看 ascii 表，没想到在 linux 上可以直接查看，记录下。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
      <category term="Linux" scheme="https://rovast.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://rovast.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记录一个 ab 工具使用的小坑</title>
    <link href="https://rovast.github.io/2019/08/15/some-tricks-in-ab-benchmark/"/>
    <id>https://rovast.github.io/2019/08/15/some-tricks-in-ab-benchmark/</id>
    <published>2019-08-15T03:17:35.000Z</published>
    <updated>2020-11-28T08:49:18.083Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 ab 进行压测时，出现一个小问题：</p><p>每次请求返回的状态码都是 200，但是有大量的 failed！</p><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>首先，查询 nginx 的 access log，我们发现压测的请求返回的都是 200。这说明我们请求没有问题</p><p><strong>怀疑是 ab 工具问题</strong></p><h2 id="使用-jmeter-压测"><a href="#使用-jmeter-压测" class="headerlink" title="使用 jmeter 压测"></a>使用 jmeter 压测</h2><p>使用 jmeter 进行压测，发现请求居然都是正确的。验证是 ab 问题</p><h2 id="网上查询相应问题"><a href="#网上查询相应问题" class="headerlink" title="网上查询相应问题"></a>网上查询相应问题</h2><p><a href="https://stackoverflow.com/questions/6475692/investigating-apache-benchmark-failed-request" target="_blank" rel="noopener">https://stackoverflow.com/questions/6475692/investigating-apache-benchmark-failed-request</a></p><p>查询得到上述答案</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>使用 <code>man ab</code> 查看 ab 文档，发现果然有 -l 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l     Do not report errors <span class="keyword">if</span> the length of the responses is not constant. This can be useful <span class="keyword">for</span> dynamic pages. Available <span class="keyword">in</span> 2.4.7 and later.</span><br></pre></td></tr></table></figure><p>意思就是说， ab 默认情况下认为返回的长度不一致就记录为 error，通过 -l 参数可以取消这种设定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -l -n 50000 -c 50 xxxxxxxxxx</span><br></pre></td></tr></table></figure><p>加上参数后，可以正常压测了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用 ab 进行压测时，出现一个小问题：&lt;/p&gt;
&lt;p&gt;每次请求返回的状态码都是 200，但是有大量的 failed！&lt;/p&gt;
&lt;h2 id=&quot;排查问题&quot;&gt;&lt;a href=&quot;#排查问题&quot; class=&quot;headerlink&quot; title=&quot;排查问题&quot;&gt;&lt;/a&gt;排查问题
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="杂项" scheme="https://rovast.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm 集成 phpCodeSniffer</title>
    <link href="https://rovast.github.io/2019/08/14/phpstorm-load-phpCodeSniffer/"/>
    <id>https://rovast.github.io/2019/08/14/phpstorm-load-phpCodeSniffer/</id>
    <published>2019-08-14T10:14:02.000Z</published>
    <updated>2020-11-28T08:49:18.079Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要指导如何在 phpstorm 中集成 phpCodeSniffer（简称：phpCS）</p><ul><li>安装 phpCS</li><li>如何在 phpStorm 中加载 phpCS</li><li>如何加载自定义的 phpCS 的 xml 规则文件</li><li>如何在 php 文件中实时提示</li><li>如何根据规则实时修正</li></ul><p>phpStorm 官方指导文档：<a href="https://www.jetbrains.com/help/phpstorm/using-php-code-sniffer.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/phpstorm/using-php-code-sniffer.html</a></p><h2 id="安装-phpCS"><a href="#安装-phpCS" class="headerlink" title="安装 phpCS"></a>安装 phpCS</h2><p>安装 phpCS 有多种途径，可以参考 <a href="https://github.com/squizlabs/PHP_CodeSniffer#installation" target="_blank" rel="noopener">https://github.com/squizlabs/PHP_CodeSniffer#installation</a></p><p>我们使用 composer 方式安装，为了便于在所有项目中使用 phpCS，我们使用全局方式安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require <span class="string">"squizlabs/php_codesniffer=*"</span> -vvv</span><br></pre></td></tr></table></figure><p>安装完成后，会多出两个指令 <code>phpcs</code> 和 <code>phpcbf</code></p><h2 id="在-phpStorm-中加载-phpCS"><a href="#在-phpStorm-中加载-phpCS" class="headerlink" title="在 phpStorm 中加载 phpCS"></a>在 phpStorm 中加载 phpCS</h2><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/load-phpcs.png" title="load-phpcs.png"><p>按照截图的路径 <code>File &gt; Settings &gt; Language &amp; Framework &gt; PHP &gt; Quality Tools &gt; Code Sniffer</code>，选择 Local 后选择刚才的安装路径。</p><blockquote><p>如果不清楚刚才安装的全局路径，Linux 下可使用 <code>whereis phpcs</code> 查看路径。其他系统可自行搜索 “composer 全局 bin 目录” 获取更多帮助。</p></blockquote><blockquote><p>或者，你也可以用 <code>composer global config bin-dir --absolute</code> 来查看 composer 的 bin 目录`</p></blockquote><h2 id="加载自定义-xml-规则文件"><a href="#加载自定义-xml-规则文件" class="headerlink" title="加载自定义 xml 规则文件"></a>加载自定义 xml 规则文件</h2><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/load-rules.png" title="load-rules.png"><p>首先，需要开启 phpCodeSniffer 的验证提示，如截图所示。其次，在截图右下角，选择 custom 来加载自定义的 xml 文件。</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/load-rule-file.png" title="load-rule-file.png"><p>加载完毕后，即可正常对打开的 PHP 文件进行实时检测。</p><h2 id="实时验证-PHP-文件"><a href="#实时验证-PHP-文件" class="headerlink" title="实时验证 PHP 文件"></a>实时验证 PHP 文件</h2><p>进行上述配置后，对打开的 PHP 文件会进行实时检测。</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/warning.png" title="warning.png"><p>如图所示，对于不符合规范的代码，会进行波浪线显示，鼠标悬浮后可以看到详细说明。</p><h2 id="自动修正"><a href="#自动修正" class="headerlink" title="自动修正"></a>自动修正</h2><p>光标放置在波浪线处，按下组合键 <code>alt</code> + <code>enter</code>，选择 <code>PHP Code Beautifier and Fixer</code> 即可修正。</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/fix.png" title="fix.png"><p>修正后</p><img src="/2019/08/14/phpstorm-load-phpCodeSniffer/done.png" title="done.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>结合 phpCS，我们可以在开发时实时检测团队代码规范，便于在提交前进行规范统一。</p><p>集成在 IDE 中的 phpCS 可以对打开的文件进行实时检测，如果需要对整个项目或者是指定的文件夹进行检测，可以直接使用 <code>phpcs</code> 命令进行检测，使用 <code>phpcbf</code> 进行修正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要指导如何在 phpstorm 中集成 phpCodeSniffer（简称：phpCS）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 phpCS&lt;/li&gt;
&lt;li&gt;如何在 phpStorm 中加载 phpCS&lt;/li&gt;
&lt;li&gt;如何加载自定义的 phpCS 的 xml 规则文件&lt;
      
    
    </summary>
    
      <category term="工具" scheme="https://rovast.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHP" scheme="https://rovast.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>sonar 初探</title>
    <link href="https://rovast.github.io/2019/08/13/start-sonar/"/>
    <id>https://rovast.github.io/2019/08/13/start-sonar/</id>
    <published>2019-08-13T07:50:16.000Z</published>
    <updated>2020-11-28T08:49:18.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>参考文档 <a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/get-started-2-minutes/</a></p></blockquote><p>sonar 由两部分组成：sonarqube 和 sonar-scanner-cli。前者是 web 端，后者是 CLI 端。下载地址如下：</p><ul><li><a href="https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.9.1.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.9.1.zip</a></li><li><a href="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip</a></li></ul><p>另外，运行 sonar 需要 jvm 环境，自行安装。ubuntu 可执行 <code>apt install openjdk-11-jdk</code></p><h2 id="运行-web-端"><a href="#运行-web-端" class="headerlink" title="运行 web 端"></a>运行 web 端</h2><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>解压 sonarqube-7.9.1.zip 后，进入 sonarqube-7.9.1 目录，执行下述指令启动，之后访问 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/linux-x86-64/sonar.sh console</span><br></pre></td></tr></table></figure><p>另外，如果需要修改配置，修改 <code>conf/sonar.properties</code> 文件即可，其中 92 行附近可以修改运行内存</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar.web.javaOpts=-Xmx5000m -Xms5000m -XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure><h3 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h3><p>访问 <a href="http://localhost:9000，登录信息" target="_blank" rel="noopener">http://localhost:9000，登录信息</a></p><ul><li>用户名  admin</li><li>密码  admin</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>点击右上角加号，创建项目，输入项目名称、token 信息后，会显示一个指令，用户</p><img src="/2019/08/13/start-sonar/1565679757086.png" title="1565679757086.png"><h2 id="进行代码扫描"><a href="#进行代码扫描" class="headerlink" title="进行代码扫描"></a>进行代码扫描</h2><p>之前我们安装了 <code>sonar-scanner-cli-4.0.0.1744-linux.zip</code>，解压后，增加 <code>bin</code> 到环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/rovast/Software/sonar-scanner-4.0.0.1744-linux/bin</span><br></pre></td></tr></table></figure><p>然后使其生效 <code>source ~/.bashrc</code> 或者 <code>source ~/.zshrc</code></p><p>根据上一步的提示，进入到需要扫描的项目录，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner \</span><br><span class="line">  -Dsonar.projectKey=laravel-framework \</span><br><span class="line">  -Dsonar.sources=. \</span><br><span class="line">  -Dsonar.host.url=http://localhost:9000 \</span><br><span class="line">  -Dsonar.login=0273f96b7dd12e0790ab2350b4c497fcedff6b36</span><br></pre></td></tr></table></figure><p>等待运行结束后，web 端会自动加载对应报告进行分析</p><h2 id="查看分析报告"><a href="#查看分析报告" class="headerlink" title="查看分析报告"></a>查看分析报告</h2><img src="/2019/08/13/start-sonar/1565682032497.png" title="1565682032497.png"><img src="/2019/08/13/start-sonar/1565682259708.png" title="1565682259708.png"><h2 id="自定义检测规则"><a href="#自定义检测规则" class="headerlink" title="自定义检测规则"></a>自定义检测规则</h2><p>参考 <a href="https://docs.sonarqube.org/latest/analysis/languages/php/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/analysis/languages/php/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结起来，sonar 的特点就是功能强大。</p><ul><li>支持的语言丰富，主流的开发语言基本都支持了</li><li>web 界面友好，可以很清晰地查看报告和分析</li><li>分析的指标丰富：安全性、技术负债、覆盖度、主流规则等等</li><li>marketplace</li></ul><p>除了上述有点外，sonar 也有一些其他方面待考量的地方</p><ul><li>sonar 是基于 java 开发，如果需要拓展其中的规则，需要了解 java 体系</li><li>sonar 本身是一个成熟的产品，如果基于这个来自定义工作流，难度较大</li><li>sonar 资源占用较大</li></ul><p>所以如果需要一套成熟的代码检测相关工具，sonar 是个不错的选择。</p><p>sonar 和 phpCodeSinffer 对比</p><ul><li><a href="https://github.com/SonarSource/sonarqube" target="_blank" rel="noopener">https://github.com/SonarSource/sonarqube</a></li><li><a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank" rel="noopener">https://github.com/squizlabs/PHP_CodeSniffer</a></li></ul><p>最大的区别</p><ul><li>sonar 是一个产品提供了完善的解决方案</li><li>phpCodeSniffer 是一个工具，专注于 php 语法检查</li></ul><p>拓展性</p><ul><li>sonar 是成套的解决方案，可定制化程序较低。需要在 sonar 现有的 rules 中组合自己的 rule，或者在 marketPlace 中找到合适的组件。</li><li>如果需要开发完全自定义的规则，可参考 <a href="https://docs.sonarqube.org/latest/analysis/languages/php/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/analysis/languages/php/</a> ，使用 java 开发对应的规则</li><li><p>如果基于 sonar 来构建自己的工作流，可行性较低。因为他本身是个产品，所有功能都集成了，有自己的一套思想</p></li><li><p>phpCodeSniffer 是基于 PHP 的一套语法检测工具</p></li><li>phpCodeSniffer 预留了语法检查的接口和类。如果需要自定义规则，实现对应的接口或类即可，较为简单</li><li>如果基于 phpCS 来构建自己工作流，较为现实。毕竟它只是个工具</li><li>另外，phpCS 有基于 IDE 的一些插件，可以集成到编辑器中实时检查</li></ul><p>总结</p><ul><li>如果只是做语法检查，并且希望高度自定义，推荐使用 phpCodeSniffer</li><li>如果对定制化程度没有要求，希望有个工具开箱即用，并且也无后续定制需求，可使用 sonar</li><li>【推荐】使用 phpCS，这样便于后期和也无框架高度集成，便于做更多贴合框架和业务的检测。比如业务级别调用规范等</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参考文档 &lt;a href=&quot;https://docs.sonarqube.org/latest/setup/get
      
    
    </summary>
    
    
      <category term="杂项" scheme="https://rovast.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>记一次 C# aes 加密转 php</title>
    <link href="https://rovast.github.io/2019/06/28/c-sharp-aes-to-php-note/"/>
    <id>https://rovast.github.io/2019/06/28/c-sharp-aes-to-php-note/</id>
    <published>2019-06-28T03:35:53.000Z</published>
    <updated>2020-11-28T08:49:18.044Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次 C#  转 PHP 中遇到的一个问题。</p><p>描述：aes-128-cbc 的 c# 转 php</p><p>c# 代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Security.Cryptography;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace Rextester &#123;</span><br><span class="line">    class Program &#123;</span><br><span class="line">        public static string EncryptAES (string key, string content) &#123;</span><br><span class="line">            // 关键代码</span><br><span class="line">            using (var aes = new RijndaelManaged ()) &#123;</span><br><span class="line">                aes.BlockSize = 128;</span><br><span class="line">                aes.IV = iv;</span><br><span class="line">                aes.Key = key;</span><br><span class="line">                aes.Mode = CipherMode.CBC;</span><br><span class="line">                aes.Padding = PaddingMode.PKCS7;</span><br><span class="line">                var cryptoTransform = aes.CreateEncryptor ();</span><br><span class="line">                var resultArray = cryptoTransform.TransformFinalBlock (content, 0, content.Length);</span><br><span class="line">                aes.Clear ();</span><br><span class="line">                return Convert.ToBase64String (result, 0, result.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public static void Main (string[] args) &#123;</span><br><span class="line">            Console.Write (EncryptAES (&quot;abcd&quot;, &quot;1234&quot;));</span><br><span class="line">            Console.Read ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PHP 代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myEncrypt</span><span class="params">($key, $content)</span></span>&#123;</span><br><span class="line">    <span class="comment">// AES-128-CBC AES-192-CBC AES-256-CBC</span></span><br><span class="line">    <span class="keyword">return</span> base64_encode(openssl_encrypt($content,<span class="string">'AES-128-CBC'</span>, base64_encode(md5($key,<span class="keyword">true</span>)), OPENSSL_RAW_DATA, $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myEncrypt(<span class="string">'abcd'</span>, <span class="string">'efg'</span>);</span><br></pre></td></tr></table></figure></p><p>注意点说明</p><ol><li><p><code>OPENSSL_RAW_DATA</code> 对应的是 PKCS7</p></li><li><p><code>AES-128-CBC</code> 两个语言处理不一致</p></li></ol><ul><li>对于 PHP 而言，因为所使用的是 aes-128-cbc，所以 key length 需要是 128bits 才行。所以 php 会自动截取 $key，即 <code>substr($key, 0, 16)</code>;</li><li>对于刚才的 C# 而言，可不一样了，如果 key length 大于 128bits，他会自动填充0，最后变为 aes-cbc-192，此时，php对应的方法也要改。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一次 C#  转 PHP 中遇到的一个问题。&lt;/p&gt;
&lt;p&gt;描述：aes-128-cbc 的 c# 转 php&lt;/p&gt;
&lt;p&gt;c# 代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="杂项" scheme="https://rovast.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
</feed>
